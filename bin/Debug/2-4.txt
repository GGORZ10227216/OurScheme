1

; =============== Problem 1 可見數據 ====================
(define a "=============== Problem 1 viewable case =================")
a

(clean-environment)

; when the being evaluated S-expr is an atom, the result is that atom
; (in our standard print-form)

3
+3
+3.5
-.12549
"Hi\n\""""

; when a function is being evaluated, the parameters of this function
; are evaluated BEFORE this function is "applied" 
; to the evaluated results (of the parameters)

; 1. A list (or rather, a dotted pair) is CONSTRUCTED.

(cons 3 4)     ; an operation on two objects
(cons 3
      nil
)            ; '(3 . nil)' = '(3)'
(cons 30
      ()
)            ; same thing
(cons 300
      #f
)            ; same thing
()
(cons () nil)(cons #f #f)(cons nil ())
(list 1 2 3)(list nil 2 3 #f)

; 2. quote - a way to "by pass" the default interpretation of an S-exp

'(3 4 5)'()
(quote (3 (4 5)))

(cons 3 '(4321 5))

(list 3 '(4 5))
(list 3 
        '(4 5) 
        6 
        '(7 8))
        
; 3. To give a (symbolic) name to an object

; Meaning of DEFINE revisited ("令")

; Basically, DEFINE establishes a (temporary) binding between a symbol 
; and (the internal representation of) an S-expression

(define a 5)   ; "令a為5"; 讓我們把"那個東西"又稱為'a'
(define b (cons 3 5))
b             ; Is 'b' a name of some thing?
a             ; Is 'a' a name of some thing?
(define x '((3 4) 5))   ; 讓我們把"那個東西"又稱為'x'
x              ; Is 'x' a name of some thing?

; Combining (1), (2) and (3)

(define hello '(1 2 . 3))
hello
(cons hello 
      4
)  
(cons 10 #f)     
(cons hello 
      '(4)
)    
(list hello hello)   
(define hello "\"CYCU ICE\"")
(list hello hello '(100))
(cons hello 
        '(400 (5000 600) 70)
  )       
(define there "Number One!")
(list hello there)

(define a '(30 40))
(cons 5 a)
a

; Whenever a function is called, its parameters are evaluated BEFORE
; the function is "applied" to the evaluated results of the parameters ;  
; However, this requires that (the evaluated result of) the first 
; component of the being-evaluated list must be bound to a function ;
; if (the evaluated result of) the first component of the being-evaluated list
; is not bound to a function in the first place, the evaluation process 
; stops, and an appropriate error message is issued.

; 4. Different parts of a list (or a dotted pair) can be 
;    individually accessed (by using 'car' and 'cdr')

(car '(3 . 4))  ; the "left part" of a dotted pair
(cdr '(3 . 4))  ; the "right part" of a dotted pair
(car '(3 4 5))    
(cdr '(3 4 5))
(car '((3 4) "Happy New Year!")  )
(cdr '((3 4) "Happy New Year!")  )
(car '((3 4) "Merry Christmas!" . 6)  )
(cdr '((3 4) "Merry Christmas!" . 6)  )
(car '((3 4) . "Happy New Year!")  )
(cdr '((3 4) . "Happy New Year!")  )
(car a)
(cdr a)

; =============== Problem 2 可見數據 ====================
(define a "=============== Problem 2 viewable case =================")
a

(clean-environment)

; 5. Primitive predicates (A predicate is a function that returns
;      #t or nil (i.e., #f); By convention, the name of a predicate
;      should have a suffix '?')

(pair? 3)      ; Other Lisps may not have PAIR?; they have ATOM? and LIST?
(pair? '(3 4))
(pair? '(3 . 4))
(pair? "Hello, there!")
(null? ())     ; is it the empty list?
(null? #f)     ; #f = nil = ()
(null? '(3 . 4))
(integer? 3)
(integer? 3.4)
(integer? -.4)
(real? +3)
(real? 3.4)
(real? .5)
(number? 3)
(number? 3.4)
(string? "Hi")
(string? +3.4)
(boolean? #t)
(boolean? ())
(boolean? #f)
(boolean? '(3 . 4))
(symbol? 'abc)
(symbol? 3)
(define America '(U. S. A.))
(symbol? America    ; Once the symbol America is evaluated,
  )                 ; do we get a symbol?
(pair? America)     ; does the binding of >>America<< starts with a cons-cell?
(boolean? America)

; 6. Basic arithmetic, logical and string operations

(+ 3 7 10)
(- 3 7 10)   ; the result of int OPR int is int
(+ 3 7.5 10) ; the result of int OPR float is float
(- 3 7.5 10) ; order of evaluation is left associative (i.e., from left to right)
(* 3 4)
(* 3 4.5 5)
(define a 5)
(/ 15 a)     ; be careful! there may be DIVISION BY 0
(/ 7 a)
(/ 15.0 3)
(/ 15 2)
(/ 15.0 2)
(/ 15 2.0)
(/ 45 3 5 2)
(+ 15.125 4)
(not #t)
(not 3)
(not '(1 2))
(not ())
(not nil)
(> 3 2)
(> 5 3 1)
(> 5 3 5)
(> 3.125 2 -5)
(>= 3.25 2 2)
(< 3.125 2 4)
(<= 3.125 2)
(<= 2 2 2 2 2 2 2 2)
(= 2 2 2)
(= 2 3 2)
(= 2 a)
(= 2 a a)
(>= a a a)
(string-append "\"Hello," " there!\"")
(string-append "Hello," " there!" " Wait!")
(string>? "az" "aw")
(string>? "az" "aw" "ax")
(string>? "az" "aw" "atuv")
(string<? "az" "aw")
(string<? "az" "aw" "ax")
(string<? "az" "aw" "atuv")
(string=? "az" "aw")
(string=? "az" "aw" "ax")
(string=? "az" (string-append "a" "z"))

; 8. eqv? and equal?

; eqv? returns "true" only when the two being compared
; objects are atoms (except in the case of strings)
; or when the two being compared objects "occupy the
; same memory space".

; equal?, on the other hand, is the usual notion of 
; equality comparison

(eqv? 3 3)
(define a '((3 (4 5))))
a
(eqv? a a)
(eqv? a '((3 (4 5))))
(equal? a '((3 (4 5))))
(define b a)
(eqv? a b)
(define c '((3 (4 5))))
(eqv? a c)
(equal? a c)
(eqv? '((3 (4 5))) '((3 (4 5))))
(eqv? "Hi" "Hi")
(equal? a a)
(equal? '((3 (4 5))) '((3 (4 5))))
(equal? '((3 (4 5))) '(3 4 5))
(equal? "Hi" "Hi")

; =============== Problem 3 可見數據 ====================
(define a "=============== Problem 3 viewable case =================")
a

(clean-environment)

; 9. Conditionals

(if (> 3 2) 'good 'bad)
(if (> 3 2) 'good)
(define a 5)
(if a 'good 'bad)
(if (not a) 'good 'bad)
(define a nil)
(if a '(1 2) '(3 4))
(if (not a) '((1 (2) 1) 1) '((3) (4 3)))
(if (not a) '((1 (2) 1) 1) )
(if 1 2 3)
(if (cons 1 2) 3 4)
(if nil 3 4)
(if #t 3 4)
(define b 4)
(cond ((> 3 b) 'bad)
      ((> b 3) 'good)
      (else "What happened?") ; note that 'else' is a keyword in OurScheme ; 
)                             ; however, it is not a primitive
(define else #t) ; a non-primitive symbol can always have a binding
(cond ((> 3 b) 'bad)
      (else 'good)            ; this 'else' is a "normal" symbol
      ((> b 3) 'ok)
)
(define else #f)
(cond ((> 3 b) 'bad)
      (else 'good)            
      ((> b 3) 'ok)
)
(cond ((> 3 b) 'bad)
      ((> b 5) 'bad)
      (else "What happened?") ; only when being here is 'else' a keyword
)
(cond ((> 3 b) 'bad)
      ((> b 5) 'bad)
      (#t "What happened?")   ; can also use #t to mean "in all other cases"
)
(cond (#t 3))
(cond ((> 3 4) 'bad)
      ((> 4 3) 'good)
)
(cond ('(3 4) 'bad)
      ((> 4 3) 'good)
)
(cond (5 'bad)
      ((> 4 3) 'good)
)
  
; more 搞怪examples

(define a 10)
(define b 20)

(cond ((> a b) 3)
      (#f 4)
      (else 5)
) ; should get 5

(define else '(1 2))

else ; should get >>(1 2)<<

(cond ((> b 100) 3)
      (else 4)
      (else 5)
) ; should get 4

(cond ((> a 100) 3)
      ((not else) 4)
      (else else)
) ; should get >>(1 2)<<

(define else #f)

(cond ((> a b) 1)
      (else 2)
      (else else)
) ; should get nil


; =============== Problem 4 可見數據 ====================
(define a "=============== Problem 4 viewable case =================")
a

(clean-environment)

(begin 3)
(begin 3 4 5)

(begin 
   (car '(1 2 3))
   (cdr '(1 2 3))
)

(begin
   (list '(1 2 3))
)

(define a 5)

( and        ; 'and' either returns the evaluated result of
  (pair? 3)  ; the first one that is evaluated to nil
  a          ; or the evaluated result of the last one
)                          

( and #t a )

( or         ; 'or' either returns the evaluated result of
  a          ; the first one that is not evaluated to nil
  (null? ()) ; or the evaluated result of the last one
)

; ------- functional compositions (same category) -------

(define hello "\"CYCU ICE\"")
(define there "Number One!")
(cons (car (list hello there)) there)

(define a '(30 40))
(cons 5 a)
a
(define a (cons 3 a))
(cons (cons 5 a) a)
a
(car (car (cons a a)))
(cdr (list a a (car (car (cons a a)))))
(define a (cdr (list a a (car (car (cons a a)))))
)
(car (cdr a))
(cons (car (cdr (cdr (car a))))
      (cdr a)
)
(define a
 (list (car (cdr a))
       (cons (car (cdr (cdr (car a))))
             (cdr a)
       )
       (car (cdr a))
 )
)
a
(define b a)
(define b (cons (list a b) a))
b
(cons (car b) (car (cdr b)))

; ------- functional compositions (same category) -------

(define a 5)
(define b 10)
(define c 20)
(define list1 '(11 22 33))
(define list2 '(12 23 34))
(define str1 "abc")
(define str2 (string-append "d" "de"))
(define var1
 (- ( + (- a b) (* c a 3) 
    )
    (* a (+ b c (car list1)))
    (car (cdr list2))
 )
)
(>= var1 (car (cdr (cdr list2))))
(string>? (string-append "Hello" str1)
          str2
)
(not (> a 3))
; etc.

; ------- functional compositions (different categories) -------

(cons
  (cons (+ 30 50)
        (cdr '(The sun shines bright))
  )
  (list (null? '())
        (pair? '(30 (40)))
        (- (+ 5 7) (+ 2 3))
        '(1 2 . (3))
  )
)
(if (> a b)
    (* a
      (+ (car list1)
         (car (cdr list2)))
    )
    (* b
      (+ (car list2)
         (car (cdr list1)))
    )
)
(if (not (> a b))
    (* a
      (+ (car list1)
         (car (cdr list2)))
    )
    (* b
      (+ (car list2)
         (car (cdr list1)))
    )
)

(define d 20)
(begin
   3 4 d)
(begin
   (+ 3 5)
   (- 4 5)
   (* d d)
)
(define a 20)
(define b 40)
(list
     ( if (> a b)
          (+ a (* a b))
          (- b (+ a a))
     )

          ( begin
            (- b (+ a a))
            (> 70 b)
          )
)
(if #t (begin 3 4 5))
(cond ((> 5 3) 'good 'better 'best) (#t 'OK?)   )
(define a (+ a b a))

(cond ( (> a b) (+ a b) (- a b) (* a b) ) 
      (  else 'OK? )   
)

(cond ( (< a b) 
        (+ a b) (- a b) (- a Look!) (* a b)
      ) 
      (  else
         ( list 'OK? 'Correct? )
         ( cons 'OK? 'Correct? ) 
      )   
)

