1
(define a "=============== Problem 7 viewable case =================")
a

 ; define + lambda (用para.做為(initialized)"local para") - complex - COND IF BEGIN AND OR (nested calls)

(clean-environment) ; first round, no error

(define x1 3)(define x2 4)(define x3 5)
(define (Fcond x4 x1) 
        (cond ( (> x4 x1) 
                (+ x4 x1)
                ( if (< x4 x1)
                     (+ x4 x1 22)
                     (+ x4 x1 33)
                )
              ) 
              ( (< x4 x1) 
                (* x4 x1)
                ( if (< x4 x1)
                     (* x4 x1 2)
                     (* x4 x1 3)
                )
              )
              ( else 
                (- x4 x1)
                (if (= x4 x1)
                    (- x4 x1 20)
                    (- x4 x1 30)
                )
              );else
        );cond
);define
(Fcond x1 x2)
(Fcond x2 x3)
(Fcond x1 x1)
(define (Fif x1 x4 x3) 
        (if (>= x2 x3) 
            ( begin 
              (+ x1 x3) 
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (+ x1 x3 33)
                   (+ x1 x3 44)
              );if
            );begin
            ( begin 
              (- x3 x4)
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (- x3 x4 33)
                   (- x3 x4 44)
              );if
            );begin
        );if
);define
(Fif 30 40 50)
(Fif x1 x2 x3)
(Fif x3 x2 x1)
(Fif x2 x2 80)
(define (Fbegin x3) 
        ( begin 
          ( begin (+ x1 x3) )
          ( begin (- x2 x3) )
          ( cond ( (> x3 x1) (+ x3 x1) ) 
                 ( (< x3 x1) (* x3 x1) )
                 ( else      (- x3 x1) )
          );cond
        );begin
);define
(Fbegin x1)
(Fbegin 80)
(Fbegin x2)
(define (Fand x4 x2 x5) 
        (and ( if ( > x1 0 )
                  ( < x1 40 )
                  ( > (- x1 x5) 27)
             )
             (> x4 x2) 
             (> x2 x5) 
             (> x5 0)
        );and
);define
(Fand x3 x2 (+ x3 x2))
(Fand x3 10 x1)
(Fand 7 6 x2)
(Fand (+ 7 x3) 1 (- -7 x2))
(define (For x1 x4 x3) 
        (or (and 
              (> x1 50)
              (> x4 170)
            )
            (> x1 x4) 
            (> x4 x3) 
            (> x1 100) 
            (> x4 100) 
            (> x3 100)
        );or
);define
(For 10 20 30)
(For 1000 20 30)
(For 30 40 20)
(For x1 x2 x3)
(For x2 x2 x2)
(For x2 x1 20)
( define ( Flambda x1 )
         ( if ( > x1 0 )
              ( lambda ( x2 ) ( * x2 2 )
              );lambda
              ( lambda ( x3 ) ( * x3 3 )
              );lambda
         );if
);define
Flambda
( Flambda 10 )
( Flambda -10 )
( ( Flambda 10 ) x1 )
( ( Flambda -10 ) x1 )

(clean-environment) ; second round, with error

(define x1 3)(define x2 4)(define x3 5)
(define (Fcond x4 x1) ;    x4 is p1    x1 is p2
        (cond ( (> x4 x1) 
                ( if (< x4 x2)
                     (+ x4 x1 22)
                     ; (+ x4 x1 33) ; no return-value when p1 > p2 and p1 >= x2
                )                   ; but OK
                (+ x4 x1)
              ) 
              ( (< x4 x1) 
                ( if (< x4 x1)
                     (* x4 x1 2)
                     (* x4 x1 3)
                )
                (* x4 x1)
              )
              ( else 
                (- x4 x1)
                (if (= x4 x3)
                    (- x4 x1 20)
                    ; (- x4 x1 30) ; no return-value when p1 = p2 and p1 <> x3
                )                  ; result not OK
              );else
        );cond
);define
(Fcond x1 x2)
(Fcond x2 (- x2 1))
(Fcond x2 x3)
(Fcond x1 x1)
(Fcond (+ x3 1) (- (+ x3 2) 1))
(define (Fif x1 x4 x3) ;      x1 is p1    x4 is p2    x3 is p3
        (if (>= x2 x3) 
            ( begin 
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (+ x1 x3 33)
                   ; (+ x1 x3 44) ; no return value when x2 >= p3 AND ( p1 <= 50 OR p2 <= 50 )
              );if                ; but OK
              ; (display-string "Hello\n")
              (+ x1 x3) 
            );begin
            ( begin 
              (- x3 x4)
              ; (display-string "Hi\n")
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (- x3 x4 33)
                   ; (- x3 x4 44) ; no return value when x2 < p3 AND ( p1 <= 50 OR p2 <= 50 )
              );if                ; result not OK
            );begin
        );if
);define
(define temp1 70)(define temp2 80)(define temp3 (- x2 1))
(Fif 130 40 -50)
(Fif x1 x2 x3)
(Fif x1 (Fcond x1 x1) x3)
(Fif temp1 temp2 temp3)
(Fif x3 x2 x3)
(Fif (+ x2 51) (* 50 2) 8)
(Fcond x2 (Fif x1 x2 x3))
( define (Fbegin x3)  ;       x3 : p1
  ( begin 
    ( begin (+ x1 x3) )
    ( begin (- x2 x3) )
    ( cond ( (> x3 x1) (+ x3 x1) ) 
           ( (< x3 x1) (* x3 x1) )
           ; ( else      (- x3 x1) ) ; no return value when p1 = x1
    );cond                           ; but OK
  );begin
  ( begin 
    ( begin (+ x1 x3) )
    ( begin (- x2 x3) )
    ( cond ( (> x3 x1) (+ x3 x1) ) 
           ( (= x3 x1) (* x3 x1) )
           ; ( else      (- x3 x1) ) ; no return value when p1 < x1
    );cond                           ; result not OK
  );begin
);define
(Fbegin x1)
(Fbegin 80)
(Fbegin -80)
(Fbegin (- x2 (- x2 x1)))
(define (Fand x4 x2 x5)  ;   x4 : p1    x2 : p2    x5 : p3
        (and ( if ( > x2 0 )
                  ( < x1 40 )
                  ; ( > (- x1 x5) 27) ; no return value when p2 <= 0
             )                        ; result not OK
             (> x4 x2) 
             (> x2 x5) 
             (> x5 0)
        );and
);define
(Fand x3 x2 x1)
(Fand x3 -10 x1)
(Fand 7 6 x2)
(Fand 7 (- x2 x2 3) -7)
(define (For x1 x4 x3) 
        (or (and 
              (> x1 50)
              (> x4 170)
            )
            (> x1 x4) 
            (> x4 x3) 
            (> x1 100) 
            (> x4 100) 
            (> x3 100)
        );or
);define
(For 10 20 30)
(For 1000 20 30)
(For 30 40 20)
(For x1 x2 x3)
(For x2 x2 x2)
(For x2 x1 20)
( define ( Flambda x1 )    ;    x1 : p1
  ( begin
    ( if ( > x1 40 )
         ( lambda ( x2 ) ( * x2 2 )
         );lambda
         ; ( lambda ( x3 ) ( * x3 3 ) ; no return value when p1 <= 40
         ; );lambda                   ; but OK
    );if
    ( if ( > x1 0 )
         ( lambda ( x2 ) ( * x2 2 )
         );lambda
         ; ( lambda ( x3 ) ( * x3 3 ) ; no return value when p1 <= 0
         ; );lambda                   ; result not OK
    );if
  ); begin
);define
Flambda
( Flambda 10 )
( Flambda -10 )
( ( Flambda 10 ) x1 )
( ( Flambda -10 ) x1 )
( + ( ( Flambda 10 ) x1 ) ( ( Flambda 10 ) x1 ) )
( + ( ( Flambda 10 ) x1 ) ( ( Flambda -10 ) x1 ) )
( + ( ( Flambda 10 ) x1 ) ( Flambda -10 ) )
( + ( ( Flambda 10 ) x1 ) ( Flambda 10 ) )

(clean-environment)

( let ( (x 3) (y '(1 2 3))
        )
        (cons 1 '(4 5))       ; this will be evaluated ; but no use
        (cons x (cdr y))      ; the value of this one is the value of LET
  )
x
(let (car '(1 2 3))  ; first argument of LET should be a list of 
                       ; two-element lists
       5
  )
(let ((x 3 4)) 5     ; first argument of LET should be a list of
                       ; two-element lists ( '(x 3 4)' is not a
                       ;                     two-element list )
  )
(let ((x 3)
       ) 
       ( + 5 x )
       ( - 5 x ) 
  )
(let ( ( (car '(x y z)) ; first argument of LET should be a list of
           3              ; two-element lists ;
         )                ; Furthermore, the first element of each 
       )                  ; two-element list must be a symbol
       5
  )
(let ()             ; There should be at least one S-expression following
                      ; the first argument
                      ; ...
  )                   ; ...
(let () 5           
  )
(let ( ( x 
           5
         )
       )        
  )
(let ( ( x (cons 5) )
       )
       ( + x x )
  )
(let ( ( x (cons 5) ) ; ...
       )
     (car 5 6 x)      ; LET的這裡該有(起碼一個)S-expression才對
  )
(let ( ( x (cons 5 10) )
     )
     (car x )
     (cdr (cons x x))
)
(let ( ( x (cons 5 10) )
     )
     (car x )
     (cdr (cons x x))
     ( + 3 (* x 5) (- x 3) )
)
(cons (car '(1 2 3) '(4 5)) ; ...
        '(6 7)
        '(8 9)
  )
(cons (car '(1 2 3) '(4 5) ) ; ...
        '(6 7)
  )
(let ((x (1 2 3)) ) 5  ; Syntax-check OK
  )
(let ( (x (1 2 3)) )   ; Syntax-check not OK
  )
(let ( (x (1 2 3)) (5) )   ; Syntax-check not OK
       10
  )
  
(clean-environment)

(define a 5)
(let ( (x 6) (y '(1 2 3))
       )
       (+ a x (car (cdr y))
       )
  )
a
x
(let ( (x 6) (y '(1 2 3))
         (a 7)               ; local variable "shadows" global variable
       )
       (+ a x (car (cdr (cdr y)))
       )
  )
a
(let ( (x 6) (y '(1 2 3))
         (a 7)
       )
       (+ a x (car (cdr (cdr y)))
       )
       (- a x (car (cdr (cdr y)))
       )
  )
(let ( (x 6) (y '(1 2 3))
         (a 7)
       )
       (+ a x (car (cdr (cdr y)))
       )
       (let ( (a 17) (x 11) 
            )
            (- a x (car (cdr (cdr y)))
            )
       )
  )
(let ( (x 6) (y '(1 2 3))
         (a 7)
       )
       (+ a x (car (cdr (cdr y)))
       )
       (let ( (a 17) (x 11) 
            )
            (- a x (car (cdr (cdr y)))
               (let ( (x 21) )
                    (+ a x 5)
                    (- 0 a x)
               )
            )
       )
  )
(let ( (x 6) 
       (y '(1 2 3))
       (a 7)
     )
     (+ a x (car (cdr (cdr y)))
     )
     (let ( (a 17) (x 11 12) 
          )
          (- a x (car (cdr (cdr y)))
             (let ( (x 21) )
                  (+ a x 5)
                  (- 0 a x)
             )
          )
     )
)
(let ( (x 6) (y '(1 2 3))
         (a 7)
       )
       (+ a x (car (cdr (cdr y)))
       )
       (let ( (a 17) (x 11) 
            )
            (- a x (car (cdr (cdr y)))
               (let ( (x 21) )
                    (+ a x 5)
                    (- 0 a hello)
               )
            )
       )
  )
(exit)