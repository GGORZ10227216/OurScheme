1
(define a "=============== Problem 2 viewable case =================")
a
( clean-environment )

; Expert System Shell - simple

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Utilities ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; car               ; first one
 
( define ( cadr x ) ; second one

  ( car ( cdr x ) )
  
);define cadr

( define ( caddr x ) ; third one

  ( car ( cdr ( cdr x ) ) )
   
);define caddr

( define ( caar x ) ; 'car' of first one

  ( car ( car x ) )
  
);define caar

( define ( caadr x ) ; 'car' of second one

  ( car ( cadr x ) )
  
);define caar

( define ( caaddr x ) ; 'car' of third one

  ( car ( caddr x ) )
   
);define caaddr

;=========================== Utilities ===============================

( define ( % original divider )

  ( cond ( ( not ( integer? original ) )
           ( create-error-object ( string-append "% : " ( number->string original )
                                                 " is not an integer."
                                 )
           )
         )
         ( ( not ( integer? divider ) )
           ( create-error-object ( string-append "% : " ( number->string divider )
                                                 " is not an integer."
                                 )
           )
         )
         ( else
           ( - original ( * ( / original divider )
                            divider
                        )
           )
         );else
         
  );cond
  
);define %

; Use the following definition of '%' when running Petite-Scheme (SWL)
;
; ( define ( % original divider )
;   ( modulo original divider )
; );define %

( define $%%% 379 )

( define ( KeyPair original )
  
  ( if ( < original $%%% )
    ( create-error-object ( string-append "Please use a number greater than "
                                          ( number->string $%%% )
                                          " as key."
                          )
    )
    ( cons ( % original $%%% )
           ( list original )
    )
  );if
  
);define KeyPair

( define ( RealKey original )

; the "key" defined by KeyPair from 'original'
  
  ( if ( < original $%%% )
    
    original
    
    ( % original $%%% )

  );if
  
);define RealKey

;=========================== Utilities ===============================

( define ( ListAppend firstList secondList )

  ( cond ( ( and ( atom? firstList )
                 ( not ( null? firstList ) )
           )
           ( create-error-object "( ListAppend firstList secondList ) : First one must be a list." )
         )
         ( ( and ( atom? secondList )
                 ( not ( null? secondList ) )
           )
           ( create-error-object "( ListAppend firstList secondList ) : Second one must be a list." )
         )
    ( else 
      ( $ListAppend firstList secondList )
    )
    
  );cond
  
);define ListAppend

( define ( $ListAppend firstList secondList )
; prerequisite: both 'firstList' and 'secondList' are lists (including the case of '())

  ( if ( null? firstList )
  
      secondList
      
      ( cons ( car firstList )
             ( $ListAppend ( cdr firstList )
                           secondList
             )
      );cons
      
  );if

);define ListAppend

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

( define ( ListLength s-expr )

  ( cond 
  
    ( ( null? s-expr ) 0 )
    
    ( ( atom? s-expr ) ( create-error-object "( ListLength s-expr ) : s-expr is a non-'() atom" )
    )
    
    ( else ( $ListLength s-expr )
    )
    
  );cond
  
);define ListLength
                           
( define ( $ListLength aList )

; prerequisite: aList is either a non-empty list (i.e., it must not be '()) 
;                        or a dotted pair

  ( let ( ( remaining ( cdr aList ) )
        );local 
        
    ( if ( atom? remaining ) ; either '() or a real atom, which means that aList is not really a list
    
         1
         
         ( + 1 ( $ListLength remaining ) 
         )
         
    );if
    
  );let
  
);define $ListLength
                           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

( define ( NthElementOf n s-expr )

  ( cond
  
    ( ( not ( integer? n ) ) 
      ( create-error-object "( NthElementOf n s-expr ) : Illegal first argument!" )
    )
    
    ( ( < n 1 )
      ( create-error-object "( NthElementOf n s-expr ) : Illegal first argument!" )
    )
    
    ; assert : n is a natural number
    
    ( ( null? s-expr )
      ( create-error-object "( NthElementOf n s-expr ) : Illegal second argument!" )
    )
    
    ( ( atom? s-expr )
      ( create-error-object "( NthElementOf n s-expr ) : Illegal second argument!" )
    )
    
    ; assert : s-expr is a dotted pair
    
    ( else
      ( $NthElementOf n s-expr )
    )
    
  );cond
  
);define NthElementOf

( define ( $NthElementOf n s-expr )
; prerequisite: n is a natural number and s-expr is a dotted pair (i.e., if list then non-empty)

  ( if ( = n 1 )
  
     ( car s-expr )
     
     ; n > 1
     
     ( let ( ( rest ( cdr s-expr ) )
           );local
           
        ( if ( atom? rest ) ; i.e., no more!
        
            ( create-error-object "( NthElementOf n s-expr ) : Value of n exceeds length of the given s-expression." )
            
            ( $NthElementOf ( - n 1 ) rest )
            
        );if
        
     );let
     
  );if
  
);define $NthElementOf

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

( define ( WithNthElementOfListReplaced n aList newElement )

; given 4 and ( a b c d e f g ) and XYZ
; it means: replace the 4TH of ( a b c d e f g ) with XYZ
; result : ( a b c XYZ e f g)

  ( cond ( ( not ( integer? n ) )
           ( create-error-object "( WithNthElementOfListReplaced n aList newElement ) : n is not an integer" )
         )
         ( ( < n 1 ) 
           ( create-error-object "( WithNthElementOfListReplaced n aList newElement ) : n is not a natural number" )
         )
         ( ( < ( ListLength aList ) n )
           ( create-error-object "( WithNthElementOfListReplaced n aList newElement ) : value of n exceeds length of aList" )
         )
         ( else
           ( $WithNthElementOfListReplaced n aList newElement )
         )
  );cond
  
);define WithNthElementOfListReplaced
  
( define ( $WithNthElementOfListReplaced n aList newElement )

; given 4 and ( a b c d e f g ) and XYZ
; it means: replace the 4TH of ( a b c d e f g ) with XYZ
; result : ( a b c XYZ e f g)

  ( if ( = n 1 ) ; we are to replace the first one of 'aList'
  
       ( cons newElement
              ( cdr aList )
       )
       
       ; n > 1
       
       ( let ( ( first ( car aList ) )
               ( new-rest ( $WithNthElementOfListReplaced ( - n 1 ) ( cdr aList ) newElement
                          )
               )
             )
         ( cons first new-rest )
       );let
       
  );if
  
);define $WithNthElementOfListReplaced
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ( define ( DivisibleBy n factor )
; 
;   ( = n 
;       ( * ( / n factor ) factor )
;   )
;    
; );define DivisibleBy

( define ( DivisibleBy n factor )
  
  ( = ( % n factor )
      0
  )

);define DivisibleBy

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

( define ( PrintListOfStringsAsSentence aList )

  ( if ( not ( null? aList ) )
     ( begin
     
       ( display-string ( car aList ) ) 
       ; instead of : 
       ; ( display-string ( eval ( car aList ) ) )
       
       ( display-string " " )
       ( PrintListOfStringsAsSentence ( cdr aList ) )
     )
     ( begin
       ( newline )
       #t
     )
  );if
  
);define PrintListOfStringsAsSentence
     
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

( define ( PrintListOfSymbolsAsSentence aList )
; with a LINE-ENTER at the end

  ( if ( not ( null? aList ) )
     ( begin
       ( display-string ( symbol->string ( car aList ) ) )
       ( display-string " " )
       ( PrintListOfSymbolsAsSentence ( cdr aList ) )
     )
     ( begin
       ( newline )
       #t
     )
  );if
  
);define PrintListOfSymbolsAsSentence
     
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

( define ( PrintListOfSymbolsStringsAsSentence aList )

  ( if ( not ( null? aList ) )
     ( begin
       ( display-string ( let ( ( element ( car aList ) )
                              );local
                          ( if ( symbol? element )
                               ( symbol->string ( car aList ) ) 
                               element
                          )
                        );let
       )
       ( display-string " " )
       ( PrintListOfSymbolsStringsAsSentence ( cdr aList ) )
     )
     ( begin
       ( newline )
       #t
     )
  );if
  
);define PrintListOfSymbolsStringsAsSentence
     
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

( define ( PrintListOfSymbolsNumbersStringsAsSentence aList )

  ( if ( not ( null? aList ) )
     ( begin
       ( display-string ( let ( ( %element ( car aList ) )
                              );local
                          ( cond ( ( symbol? %element )
                                   ( symbol->string %element )
                                 )
                                 ( ( number? %element )
                                   ( number->string %element )
                                 )
                                 ( else 
                                   %element
                                 )
                          )
                        );let
       )
       ( display-string " " )
       ( PrintListOfSymbolsNumbersStringsAsSentence ( cdr aList ) )
     )
     ( begin
       ( newline )
       #t
     )
  );if
  
);define PrintListOfSymbolsNumbersStringsAsSentence
     
;=========================== Utilities ===============================

;=========================== Expert system shell ===============================

; expertise df= name-0f-the-expertise
;               +
;               list of rules ( a rule-set, implicitly ordered )
;                 where
;                 a rule df= '(' <condition> <action> ')' // multiple actions allowed
;               +
;               evaluation of some corresponding function (a function that can be called)

; For each expertise that exists (i.e., for each name-of-expertise that can be called)
; there is a corresponding entry in the expertise-DB ($expertise-DB).
; This entry df= '(' name-of-expertise <rule> { <rule> } ')'

; for example

( define ( ExampleExpertise n ) ; a function that can be called

  ; Just what is an experise?
  ; an expertise is (in here) an oredered list of rules ( of the form: <condition> -> <action> )

  ( cond
  
    ( ( DivisibleBy n 3 ) ; condition
      ( + n 30 )          ; action ; it can be multiple actions
    )
    
    ( ( DivisibleBy n 5 ) ; condition
      ( + n 50 )          ; action
    )
    
    ( else                ; condition (which may or may not be 'else')
      ( * n 100 )         ; action
    )
    
  );cond
  
);define ExampleExpertise

( define $expertise-DB 

  ; for simplicity, we do not sort this DB by expertise-names for the moment 
  ; (to do that, we will need to use a BST)

  '( ( ExampleExpertise ; name of the expertise ; note that this is a symbol, not a string
     
       ; the list of rules associated with >>ExampleExpertise<<
       
       ( ( DivisibleBy n 3 ) ; condition
         ( + n 30 )          ; action
       ) ; rule 1
       
       ( ( DivisibleBy n 5 ) ; condition
         ( + n 50 )          ; action
       ) ; rule 2
       
       ( else                ; final "condition" may or may not be an 'else'
         ( * n 100 )         ; action
       ) ; last rule
    
     );the expertise >>ExampleExpertise<<
     
   ) ; $expertise-DB
   
  ; for each expertise stored in $expertise-DB, 
  ; its CAR is name-of-the-expertise (a symbol), and its CDR is the list-of-rules associated with this "expertise",
  ; with each rule being of the form >>( <condition> <action> )<< ; note again, that multiple actions are allowed
   
);define $expertise-DB

( define ( RuleSetOf expertiseName )

  ( if ( null? $expertise-DB )
  
       ( create-error-object ( string-append ( symbol->string expertiseName ) " not found (expertise-DB is currently empty)" ) )  
         
       ( $RuleSetOfFrom expertiseName $expertise-DB )
  );if
  
);define RuleSetOf

( define ( $RuleSetOfFrom expertiseName list-of-expertise )

; >>expertiseName<< is a symbol
; >>list-of-expertise<< is the list to be searched for the expertise with name being expertiseName ;
; prerequisite: 'list-of-expertise' is a non-empty list

  ( cond
  
    ( ( = ( ListLength list-of-expertise ) 1 )
    
      ( if ( equal? ( car ( car list-of-expertise ) ) expertiseName )
           ( cdr ( car list-of-expertise ) )
           ( create-error-object ( string-append ( symbol->string expertiseName ) " not found in expertise-DB" ) )
      )
    )
    
    ; ListLength > 1
    
    ( else
    
      ( if ( equal? ( car ( car list-of-expertise ) ) expertiseName )
           ( cdr ( car list-of-expertise ) )
           ( $RuleSetOfFrom expertiseName ( cdr list-of-expertise ) )
      )
    )
    
  );cond

);define $RuleSetOfFrom

;;;;;;;;;;;;;;

( define ( WithNthRuleReplaced n ruleList withThisRule )

  ; should do parameter-checks first

  ; ( WithNthElementOfListReplaced n aList newElement )
  
  ( WithNthElementOfListReplaced n ruleList withThisRule )
  
);define WithNthRuleReplaced

( define ( Rule condition action )

  ( list condition action )
  
);define Rule

( define ( DefineExpertise nameOfExpertise listOfRules )

  ( let ( ( %code
            ( list 'define
                   ( cons nameOfExpertise '( n ) )
                   ( cons 'cond listOfRules )
            )
          )
        );local-var
        
    ( eval %code ) ; define the expertise
    
    ; and add its description to the expertise-DB
    
    ( $AddToExpertiseDB nameOfExpertise ( cons nameOfExpertise listOfRules )
    )
    
    ( PrintListOfSymbolsAsSentence 
      ( list 'The 'expertise nameOfExpertise 'has 'been 'established. )
    )
    
    #t
    
  );let %code

);define DefineExpertise

( define ( $AddToExpertiseDB nameOfExpertise expertise )
  
  ( let ( ( %n ( $IndexOfExpertiseEntry nameOfExpertise 1 $expertise-DB ) )
        );local
        
    ( if ( < %n 1 ) ; no expertise with name being 'nameOfExpertise' in $expertise-DB 
    
      ; directly add the description of this expertise to DB
      ( set! $expertise-DB  
             ( cons expertise $expertise-DB ) 
      )
      
      ( PrintListOfSymbolsAsSentence 
        ( list 'Sorry. 'There 'is 'already 'an 'expertise 'named nameOfExpertise 'in 'the 'expertise 'database. )
      )
    
    );if ( < %n 1 ) ; i.e., if there is no expertise with such a name in DB
  
  );let %n

);define $AddToExpertiseDB

( define ( $IndexOfExpertiseEntry nameOfExpertise currentIndex list-of-expertise )

; anyone (with the sole exception of $IndexOfExpertiseEntry) who calls this function should pass 1 as 'currentIndex'
; return value of -1 means "not in the given list-of-expertise"
;
; terminology : the index of 'c' in '(a b c d)' is 3 (and not 2)

  ; assert : the index of first element (of list-of-expertise) in the ORIGINAL LIST is 'currentIndex'

  ( cond ( ( null? list-of-expertise ) 
           -1 
         )
  
         ( ( equal? ( car ( car list-of-expertise ) ) 
                    nameOfExpertise 
           )
           currentIndex
         )
         
         ( else ; 'nameOfExpertise' is not the first one of list-of-expertise
         
           ( $IndexOfExpertiseEntry nameOfExpertise 
                                    ( + 1 currentIndex ) 
                                    ( cdr list-of-expertise ) 
           )
           
         );else
         
  );cond

);define $IndexOfExpertiseEntry

( define ruleList-01

  '( ( ( DivisibleBy n 15 )
       ( + n 150 )
     )
     ( ( DivisibleBy n 5 )
       ( + n 50 )
     )
     ( ( DivisibleBy n 4 )
       ( + n 40 )
     )
     ( else
       ( + n n )
     )
   )
   
); define ruleList-01

( DefineExpertise 'Expertise-01 ruleList-01 )

( define rule-139

  '( ( DivisibleBy n 3 )
     ( + n 30 )
   )
   
); define rule-139

                                ; WithNthRuleReplaced n ruleList withThisRule
( DefineExpertise 'Expertise-02 ( WithNthRuleReplaced 1 ruleList-01 rule-139 )
)

( DefineExpertise 'Expertise-03 
                  ; WithNthRuleReplaced n ruleList withThisRule
                  ( WithNthRuleReplaced 2
                                        ruleList-01 
                                        ( Rule
                                          '( DivisibleBy n 7 )
                                          '( + n 70 )
                                        ) 
                  )
)

( define ( ListExpertiseNames )

; print the list of expertise-names for all expertise stored in $expertise-DB

  ( let ( ( %length ( ListLength $expertise-DB ) )
        );local
        
    ( if ( < %length 1 )
    
         ( begin
           ( display-string "The expertise database is currently empty" )
           #t
         )
         
         ( $ListExpertiseNames $expertise-DB )
         
    );if %length < 1
    
  );let %length
    
);define ListExpertiseNames

( define ( $ListExpertiseNames expertise-DB )

; print the list of expertise in 'expertis-DB'
; prerequisite: length of 'expertise-DB' >= 1

  ( display-string ( symbol->string ( car ( car expertise-DB ) ) 
                   )
  )
  ( newline )
  
  ( let ( ( %remaining-expertise ( cdr expertise-DB ) )
        );local

    ( if ( null? %remaining-expertise )
         #t
         ( $ListExpertiseNames %remaining-expertise )
    );if
    
  );let %remaining-expertise

);define $ListExpertiseNames

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

( define ( ExpertSystemShell )

  ( display-string "------------------\n" )
  
  ( display-string
  
    ( string-append
      "Available choices are\n"
      "1 or DefineExpertise ,\n"
      "2 or RemoveExpertise ,\n"
      "3 or ListExpertiseNames ,\n"
      "4 or ListRuleSet ,\n"
      "5 or ReplaceRuleSet ,\n"
      "6 or ReplaceRuleOfRuleSet ,\n"
      "7 or Quit or quit ;\n"
      "Please enter the number (or item-name) of your choice > "
    )
    
  );display-string
  
  ( let ( ( %userChoice '() )
        );locals
  
    ( set! %userChoice (read))
    
    ( if ( or ( equal? %userChoice 7 )
              ( equal? %userChoice 'Quit )
              ( equal? %userChoice 'quit )
         )
         
         'Bye!
         
         ( begin
           ( cond ( ( or ( equal? %userChoice 1 )
                         ( equal? %userChoice 'DefineNewExpertise )
                    )
                    ( DoDefineNewExpertise )
                  )
                  ( ( or ( equal? %userChoice 2 )
                         ( equal? %userChoice 'RemoveExpertise )
                    )
                    ( DoRemoveExpertise )
                  )
                  ( ( or ( equal? %userChoice 3 )
                         ( equal? %userChoice 'ListExpertiseNames )
                    )
                    ( ListExpertiseNames )
                  )
                  ( ( or ( equal? %userChoice 4 )
                         ( equal? %userChoice 'ListRuleSet )
                    )
                    ( ListRuleSet )
                  )
                  ( ( or ( equal? %userChoice 5 )
                         ( equal? %userChoice 'ReplaceRuleSet )
                    )
                    ( DoReplaceRuleSet )
                  )
                  ( ( or ( equal? %userChoice 6 )
                         ( equal? %userChoice 'ReplaceRuleOfRuleSet )
                    )
                    ( DoReplaceRuleOfRuleSet )
                  )
                  ( else 
                    ( display-string "Sorry! The choice you give is not in the list of choices.\n" ) 
                  )
           );cond
           
           ( ExpertSystemShell )
           
         );begin
         
    );if 7 or Quit
    
  );let %userChoice
  
);ExpertSystemShell

( define ( DoDefineNewExpertise )

  ( let ( ( %nameOfExpertise '() )
          ( %listOfRules '() )
        );locals
        
    ( display-string "Name of the new expertise > " )
    ( set! %nameOfExpertise ( read ) )
    
    ( let ( ( %n ( $IndexOfExpertiseEntry %nameOfExpertise 1 $expertise-DB ) )
          );local
          
      ( if ( < %n 1 ) ; there is no expertise with name being '%nameOfExpertise' in $expertise-DB 
                      ; therefore, it is OK to add this new one into $expertise-DB
        ( begin
        
          ( display-string "The set of rules to be used by the new expertise > " )
          ( set! %listOfRules ( read ) )
          
          ; ( DefineExpertise nameOfExpertise listOfRules )
          ( DefineExpertise %nameOfExpertise %listOfRules )
    
        );begin
        
        ; %n >= 1
    
        ( PrintListOfSymbolsAsSentence 
          ( list 'Sorry. 'There 'is 'already 'an 'expertise 'named %nameOfExpertise 'in 'the 'expertise 'database. )
        )
        
      );if there is no expertise with name being '%nameOfExpertise' in $expertise-DB
      
    );let %n
      
  );let %nameOfExpertise, %listOfRules

);define DoDefineNewExpertise

( define ( DoRemoveExpertise )

  ( let ( ( %nameOfExpertise '() )
        );locals

    ( display-string "Name of the expertise to remove > " )
    ( set! %nameOfExpertise ( read ) )
    
    ( let ( ( %n ( $IndexOfExpertiseEntry %nameOfExpertise 1 $expertise-DB ) )
          );local
          
      ( if ( < %n 1 ) ; no expertise with name being '%nameOfExpertise' in $expertise-DB 
      
        ( PrintListOfSymbolsAsSentence 
          ( list 'Sorry. 'There 'is 'no 'expertise 'named %nameOfExpertise 'in 'the 'expertise 'database. )
        )
        
        ; %n >= 1 ; i.e., found the expertise named %nameOfExpertise in $expertise-DB
      
        ( begin
        
          ; 1. remove the description of this expertise from expertise-DB
          
          ( set! $expertise-DB 
                 ; ( $WithExpertiseRemoved nameOfExpertise list-of-expertise )
                 ( $WithExpertiseRemoved %nameOfExpertise $expertise-DB ) 
          )
          
          ; 2. somewhat unbound the function-binding of the symbol '%nameOfExpertise'
          
          ( eval ( list 'set! %nameOfExpertise ''() ) ) 
          
          ; 3. feedback msg
    
          ( PrintListOfSymbolsAsSentence 
            ( list 'The 'expertise 'named %nameOfExpertise 'has 'been 'removed 'from 'the 'expertise 'database. )
          )
          
        );begin
        
      );if no expertise with name being '%nameOfExpertise' in $expertise-DB
      
    );let %n
    
  );let %nameOfExpertise
    
);define DoRemoveExpertise

( define ( $WithExpertiseRemoved nameOfExpertise list-of-expertise )

  ( cond ( ( null? list-of-expertise )
           '()
         )
         
         ( ( equal? ( car ( car list-of-expertise ) ) nameOfExpertise )
           ( cdr list-of-expertise ) ; removed
         )
         
         ( else
         
           ( cons ( car list-of-expertise )
                  ( $WithExpertiseRemoved nameOfExpertise 
                                          ( cdr list-of-expertise ) 
                  )
           )
           
         );else
         
  );cond
  
);define $WithExpertiseRemoved

( define ( ListRuleSet )

  ( let ( ( %expertiseName '() )
        );loals

    ( display-string "Please give the name of the expertise > " )
    ( set! %expertiseName ( read ) )
    
    ; ( RuleSetOf expertiseName )
    ( write ( RuleSetOf %expertiseName ) )
    ( newline )
  
  );let %expertiseName

);define ListRuleSet

( define ( DoReplaceRuleSet )

  ( let ( ( %nameOfExpertise '() )
          ( %listOfRules '() )
        );local
        
    ( display-string "Name of the expertise you want to replace its rule-set > " )
    ( set! %nameOfExpertise ( read ) )
    
    ( display-string "The new set of rules to be used by this expertise > " )
    ( set! %listOfRules ( read ) )
    
    ; ( $ReplaceRuleSet nameOfExpertise listOfRules )
    ( $ReplaceRuleSet %nameOfExpertise %listOfRules )
    
  );let %nameOfExpertise, %listOfRules

);define DoReplaceRuleSet

( define ( $ReplaceRuleSet nameOfExpertise listOfRules )

  ( let ( ( %n ( $IndexOfExpertiseEntry nameOfExpertise 1 $expertise-DB ) )
        );local
        
    ( if ( < %n 1 ) ; no expertise with name being 'nameOfExpertise' in $expertise-DB 
    
      ( PrintListOfSymbolsAsSentence 
        ( list 'There 'is 'no 'expertise 'named nameOfExpertise 'in 'the 'expertise 'database. )
      )
    
      ; got the entry-index of 'nameOfExpertise' in $expertise-DB
      
      ( let ( ( %code
                ( list 'define
                       ( cons nameOfExpertise '( n ) )
                       ( cons 'cond listOfRules )
                )
              )
              ( %expertise
                ( cons nameOfExpertise listOfRules )
              )
            );local-var
            
        ( eval %code ) ; redefine this expertise
        
        ; update its description in the expertise-DB
        
        ( set! $expertise-DB  
               ( WithNthElementOfListReplaced %n $expertise-DB %expertise )
        )
        
        ( PrintListOfSymbolsAsSentence 
          ( list 'The 'rule-set 'of nameOfExpertise 'has 'been 'replaced. )
        )
      
        #t
        
      );let %code, %expertise
    
    );if %n < 1
    
  );let %n

);define $ReplaceRuleSet

( define ( DoReplaceRuleOfRuleSet )

  ( let ( ( %nameOfExpertise '() )
          ( %whichRule '() )
          ( %rule '() )
        );local
        
    ( display-string "Name of the expertise you want to replace its rule > " )
    ( set! %nameOfExpertise ( read ) )
    
    ( display-string "Ordering of the rule that is to be replaced - Please enter a number (e.g., 3) > " )
    ( set! %whichRule ( read ) )
    
    ( display-string "The new rule to be used in its place > " )
    ( set! %rule ( read ) )
    
    ; ( $ReplaceRuleOfRuleSet nameOfExpertise whichRule rule )
    ( $ReplaceRuleOfRuleSet %nameOfExpertise %whichRule %rule )
    
  );let %nameOfExpertise, %whichRule, %rule

);define DoReplaceRuleOfRuleSet

( define ( $ReplaceRuleOfRuleSet nameOfExpertise whichRule newRule )

  ( let ( ( %n ( $IndexOfExpertiseEntry nameOfExpertise 1 $expertise-DB ) )
        );local
        
    ( if ( < %n 1 ) ; no expertise with name being 'nameOfExpertise' in $expertise-DB 
    
      ( PrintListOfSymbolsAsSentence 
        ( list 'There 'is 'no 'expertise 'named nameOfExpertise 'in 'the 'expertise 'database. )
      )
    
      ; got the entry-index of 'nameOfExpertise' in $expertise-DB
      
      ( let ( ( %existingRuleSet ( RuleSetOf nameOfExpertise ) )
              ( %newRuleSet '() )
            );locals
      
        ( if ( < ( ListLength %existingRuleSet ) whichRule )
             
             ( PrintListOfSymbolsAsSentence 
               ( list 'The 'expertise 'named nameOfExpertise 'does 'not 'have 'this 'many 'rules. )
             )
              
             ( begin
             
               ( set! %newRuleSet
                      ; ( WithNthElementOfListReplaced n aList new-element )
                      ( WithNthElementOfListReplaced whichRule %existingRuleSet newRule )
               )
        
               ( let ( ( %code
                         ( list 'define
                                ( cons nameOfExpertise '( n ) )
                                ( cons 'cond %newRuleSet )
                         )
                       )
                       ( %revisedExpertise
                         ( cons nameOfExpertise %newRuleSet )
                       )
                     );local-var
                     
                 ( eval %code ) ; redefine this expertise
                 
                 ; update its description in the expertise-DB
                 
                 ( set! $expertise-DB  
                        ; ( WithNthElementOfListReplaced n aList new-element )
                        ( WithNthElementOfListReplaced %n $expertise-DB %revisedExpertise )
                 )
                 
                 ( PrintListOfSymbolsAsSentence 
                   ( list 'The 'specified 'rule 'of nameOfExpertise 'has 'been 'replaced. )
                 )
               
                 #t
                 
               );let %code, %revisedExpertise
               
             );begin
             
        );if ( ListLength %existingRuleSet ) < whichRule
        
      );let %existingRuleSet %newRuleSet
    
    );if %n < 1
    
  );let %n

);define $ReplaceRuleOfRuleSet

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Utilities ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

( ExpertSystemShell )
3 ; ListExpertiseNames
4 ; ListRuleSet
Expertise-03 ; 15 7 4 ; + 150 ; + 70 ; + 40 ; double
ListRuleSet
Expertise-02 ; 3 5 4 ; + 30 ; + 50 ; + 40 ; double
ListRuleSet
Expertise-01 ; 15 5 4 ; + 150 ; + 50 ; + 40 ; double
4 ; ListRuleSet
ExampleExpertise ; 3 5 ; + 30 ; + 50 ; * 100
quit

( Expertise-03 60 ) ; + 150
( Expertise-03 420 ) ; + 150
( Expertise-03 28 ) ; + 70
( Expertise-03 20 ) ; + 40
( Expertise-03 37 ) ; double
( Expertise-03 9 ) ; double

( Expertise-02 60 ) ; + 30
( Expertise-02 20 ) ; + 50
( Expertise-02 32 ) ; + 40
( Expertise-02 26 ) ; double

( Expertise-01 30 ) ; + 150
( Expertise-01 20 ) ; + 50
( Expertise-01 16 ) ; + 40
( Expertise-01 18 ) ; double

( ExampleExpertise 60 ) ; + 30
( ExampleExpertise 40 ) ; + 50
( ExampleExpertise 56 ) ; * 100

( ExpertSystemShell )
6 ; ReplaceRuleOfRuleSet
Expertise-01 ; name of the expertise
3 ; ordering of the rule ( a number )
( (DivisibleBy n 3) (+ n 30) ) ; the new rule to be used
quit

( Expertise-01 16 ) ; double
( Expertise-01 18 ) ; + 30

; Expertise-01 ; 15 5 3 ; + 150 ; + 50 ; + 30 ; double
; Expertise-02 ; 3 5 4 ; + 30 ; + 50 ; + 40 ; double
; Expertise-03 ; 15 7 4 ; + 150 ; + 70 ; + 40 ; double
; ExampleExpertise ; 3 5 ; + 30 ; + 50 ; * 100

( ExpertSystemShell )
5 ; ReplaceRuleSet
ExampleExpertise ; name of the expertise
; the new set of rules to be used
( ( ( DivisibleBy
      n
      3
    )
    ( +
      n
      30
    )
  )
  ( ( DivisibleBy
      n
      5
    )
    ( +
      n
      50
    )
  )
  ( else
    ( *
      n
      10
    )
  )
)
quit

; Expertise-01 ; 15 5 3 ; + 150 ; + 50 ; + 30 ; double
; Expertise-02 ; 3 5 4 ; + 30 ; + 50 ; + 40 ; double
; Expertise-03 ; 15 7 4 ; + 150 ; + 70 ; + 40 ; double
; ExampleExpertise ; 3 5 ; + 30 ; + 50 ; * 10

( ExampleExpertise 60 ) ; + 30
( ExampleExpertise 40 ) ; + 50
( ExampleExpertise 56 ) ; * 10

( ExpertSystemShell )
1 ; DefineExpertise
Expertise-04 ; name of the new expertise
; the set of rules to be used by the new expertise
( ( ( DivisibleBy
      n
      3
    )
    ( +
      n
      30
    )
  )
  ( ( DivisibleBy
      n
      5
    )
    ( +
      n
      50
    )
  )
  ( else
    ( *
      n
      10
    )
  )
)
quit

; Expertise-01 ; 15 5 3 ; + 150 ; + 50 ; + 30 ; double
; Expertise-02 ; 3 5 4 ; + 30 ; + 50 ; + 40 ; double
; Expertise-03 ; 15 7 4 ; + 150 ; + 70 ; + 40 ; double
; Expertise-04 ; 3 5 ; + 30 ; + 50 ; * 10
; ExampleExpertise ; 3 5 ; + 30 ; + 50 ; * 10

( Expertise-04 60 ) ; + 30
( Expertise-04 40 ) ; + 50
( Expertise-04 56 ) ; * 10

( define ( GreaterThanThreshold number )
  ( if ( > number ( * $Strange 2 ) )
    #t
    #f
  )
);define GreaterThanThreshold

( define $Strange 13 )

( ExpertSystemShell )
6 ; ReplaceRuleOfRuleSet
Expertise-03 ; name of the expertise
2 ; ordering of the rule ( a number )
( (GreaterThanThreshold n) (+ n 300) ) ; the new rule to be used
quit

; Expertise-01 ; 15 5 3 ; + 150 ; + 50 ; + 30 ; double
; Expertise-02 ; 3 5 4 ; + 30 ; + 50 ; + 40 ; double
; Expertise-03 ; 15 (> double of $Strange) 4 ; + 150 ; + 300 ; + 40 ; double
; Expertise-04 ; 3 5 ; + 30 ; + 50 ; * 10
; ExampleExpertise ; 3 5 ; + 30 ; + 50 ; * 10

( Expertise-03 60 ) ; + 150
( Expertise-03 420 ) ; + 150
( Expertise-03 28 ) ; + 300
( Expertise-03 20 ) ; + 40
( Expertise-03 37 ) ; + 300
( Expertise-03 9 ) ; double

( ExpertSystemShell )
3 ; ListExpertiseNames
2 ; RemoveExpertise
ExampleExpertise ; name of the expertise to remove
3
quit

( ExampleExpertise 15 )

(exit)
