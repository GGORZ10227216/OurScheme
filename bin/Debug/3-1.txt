1
(define a "=============== Problem 1 viewable case =================")
a

(clean-environment) ; first round ; no error

(define x1 3)(define x2 4)(define x3 5)
(define (Fcond x4 x1) (cond ((> x4 x1) (+ x4 x1)) ((< x4 x1)(* x4 x1))(else (- x4 x1))))
(Fcond x1 x2)
(Fcond x2 x3)
(Fcond x1 x1)
(define (Fif x1 x4 x3) (if (>= x2 x3) (+ x1 x3) (- x3 x4)))
(Fif 30 40 50)
(Fif x1 x2 x3)
(Fif x3 x2 x1)
(Fif x2 x2 80)
(define (Fbegin x3) (begin (+ x1 x3) (- x2 x3)))
(Fbegin x1)
(Fbegin 80)
(Fbegin x2)
(define (Fand x4 x2 x5) (and (> x4 x2) (> x2 x5) (> x5 0)))
(Fand x3 x2 x1)
(Fand x3 10 x1)
(Fand 7 6 x2)
(Fand 7 1 -7)
(define (For x1 x4 x3) (or (> x1 x4) (> x4 x3) (> x1 100) (> x4 100) (> x3 100)))
(For 10 20 30)
(For 1000 20 30)
(For 30 40 20)
(For x1 x2 x3)
(For x2 x2 x2)
(For x2 x1 20)
(define x4 (lambda (x1) (* x1 2)))
x4
(x4 x3)
x1
x2

(clean-environment)

(define (cadr x) (car (cdr x))
  )
cadr
(cadr '( (10 20) (30 40) (50 60) 70 . 80 ))
(define cadr-clone cadr)
cadr-clone
(cadr-clone '( (10 20) (30 (40)) (50 60) 70 . 80 ))
(define cadr-clone car)
(cadr-clone '( (10 20) (30 (40)) (50 60) 70 . 80 ))
(define cadr-clone cadr)
(define (cdar y) (cdr (car y))
  )
(cdar '((1 2) (3 4) 5 6 7 . 8)
  )
(define first car)
car
first
(first '(10 20 30))
(define FFirst 'car)
FFirst
(define second cadr)
(second '(10 20 30))
(second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
  )
(first (second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
         )
  )
(second (first (second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
                 )
          )
  )
(cdr (first (second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
              )
       )
  )
(exit)