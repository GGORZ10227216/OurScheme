1
(define a "=============== Problem 5 viewable case =================")
a

 ; define + lambda (用para.做為(initialized)"local para") - complex - COND IF BEGIN AND OR (nested calls)
 ; + functional composition // functions 呼叫 functions
 ; + let (local vs. global)
 ; + nested locals vs. globals
 
(clean-environment) ; first round, no error

(define x1 3)(define x2 4)(define x3 5)

( define (TrickySumUp start end) 
  
  ; return the sum of start, start+1, start+2, ..., end
  ; requirement : start <= end
  ; float version + some nonsense code, which should not hurt
  
  ( cond ( (= start end) start )
         ( (> start end) "Illegal input! the first argument must be smaller or equal to the second.")
         ( else
           ( let ( ( new-start (+ start 1) )
                   ( x1 (+ x1 x2) )
                   ( x3 (+ x3 5) )
                 )
                 
                 ; instead of
                 
                 ; ( + start 
                 ;     ( if ( > new-start end ) ; just in case we've got a float here
                 ;          end
                 ;         ( TrickySumUp new-start end ) 
                 ;     ) ; if
                 ; );+
                 
                 ; we use below
                 
                 ( if ( > new-start end ) ; just in case we've got a float here
                      ( begin (+ x1 x2) (+ start end))
                      ( let ( ( sum-of-the-rest 
                                (TrickySumUp new-start end) 
                              )
                            )
                            ( + start sum-of-the-rest )
                      );let
                 );if
           );let
         );else
  );cond
   
);define TrickySumUp

(TrickySumUp 3.5 10)
(TrickySumUp 3.5 2)
(TrickySumUp 3.5 3.5)
(+ x1 x2 x3)

( define ( Abs x )
  ; return the absolute value of X

  ( if ( not ( real? x ) )
       "Abs: the given argument has to be a real number (including integer)"
       ( if ( < x 0 )
            ( * x -1 )
            x
       );if
  );if
  
);define Abs

( define ( Real x ) 

  ( cond ( ( not ( real? x ) )
           "cannot cast something that is neither a real nor an integer into a real"
         )
         ( ( integer? x ) ( * 1.0 x )
         )
         ( else x )
  );cond
  
);define Real

( define ( Int x ) 
  ; return the integer part of x

  ( cond ( ( integer? x ) 
           x 
         )
  
         ; x is not an integer
         
         ( ( not ( real? x ) )
           "Int: cannot cast something that is neither an integer nor a real into an integer"
         )
         
         ; x is a real
         
         ( else
  
           ( if ( and ( < -1 x ) 
                      ( <  x  1 ) 
                );and
           
                0
                
                ; x is a real and either x <= -1 or 1 <= x
           
                ( let ( ( x ( Abs x ) )
                        ( negative ( < x 0 ) )
                      )
                      ( let ( ( below-above ( FindRange x ) ) ; below <= x <= above
                            )
                            ( let ( ( below ( car below-above ) )
                                    ( above ( car ( cdr below-above ) ) )
                                  )
                                  ( let ( ( floor ( IntFloor below x above ) )
                                        )
                                        ( if negative
                                             ( * -1 floor )
                                             floor
                                        );if
                                  );let
                            );let
                      );let
                );let
           );if
         );else
  );cond
);define Int

( define ( Power a n )
  ; return a**n
  ; requirement: n has to be an integer
  
  ( cond ( ( not ( integer? n ) )
           "Power : n has to be an integer"
         )
         
         ; n an integer
         
         ( ( < n 0 )
           ( let ( ( positive ( * -1 n ) )
                 )
                 ( / 1.0 ( Power a positive ) )
           );let
         )
         
         ; n is a non-negative integer
         
         ( ( = n 0 )
           1
         )
         
         ; n is a positive integer
         
         ( else 
           ( * a ( Power a ( - n 1 ) ) )
         )
  );cond
  
);define Power
           
( define ( FindRange x )
  ; starting with 2**0, find n and m, so that n <= m and 2**n <= x1 < 2**m
  ; return >>( 2**n 2**m )<<
  ; x is assumed to be greater than or equal to 1
  
  ( if ( < x 1 )
       "FindRange: x must be greater than or equal to 1"
       ( Find-Range x 0 )
  );if
  
);define FindRange 

( define ( Find-Range x startWith )
  ; starting with 2**startWith, find n and m, so that n <= m and 2**n <= x1 < 2**m
  ; return >>( 2**n 2**m )<<
  ; x is assumed to be greater than or equal to 1
  
  ( let ( ( start ( Power 2 startWith ) )
          ( end ( Power 2 ( + startWith 1 ) ) )
        )
    ( cond ( ( = x start )
             ( list start start )
           )
           ( ( < x end )
             ( list start end )
           )
           ( else ; ( <= end x )
             ( Find-Range x ( + startWith 1 ) )
           )
    );cond
  );let

);define Find-Range
       
( define ( IntFloor below x above )
  ( if ( not ( and ( <= below x )
                   ( <= x above )
             )
       )
       "IntFloor: the three arguments should be BELOW <= X <= ABOVE"
       ( Int-Floor below x above )
  );if
);define

( define ( Int-Floor below x above ) 
  ; BELOW and ABOVE are two integers s. t. BELOW <= x <= ABOVE
  ; find the integer FLOOR, so that FLOOR <= x < FLOOR+1
  ; return FLOOR
  
  ( cond ( ( = below x ) below )
         ( ( = above x ) above )
         ( ( = ( + below 1 ) above )
           below
         )
         
         ; BELOW + 1 < ABOVE
         
         ( else
           ( let ( ( middle ( / ( + below above ) 2 ) 
                   )
                 )
                 
                 ; MIDDLE is neither BELOW nor ABOVE
                 ; i.e., BELOW < MIDDLE < ABOVE
                 
                 ( if ( < x middle )
                      ( Int-Floor below x middle )
                      ( Int-Floor middle x above )
                 );if
           );let
         );else
  );cond

);define Int-Floor

(FindRange 13579.246810)
(IntFloor 8192 13579.246810 16384)
(Int 13579.246810)
(Real (Int 13579.246810))
(FindRange 1024)
(Int 1024)   
(Int -13579.246810)
(exit)