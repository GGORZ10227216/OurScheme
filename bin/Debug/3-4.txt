1
(define a "=============== Problem 4 viewable case =================")
a

 ; define + lambda (用para.做為(initialized)"local para") - complex - COND IF BEGIN AND OR (nested calls)
 ; + functional composition // functions 呼叫 functions
 ; + let (local vs. global)
 
(clean-environment) ; first round, no error

(define x1 3)(define x2 4)(define x3 5)
(let ((x1 (+ x1 x2)) (y (+ x1 x2))) x1)
x1 x2
( define ( Transform tag x1 x5 )
  ( if ( > tag 0 )
       ( let ( ( x3 (+ x1 x5) )
             )
             (+ x3 x2)
       );let
       ( let ( ( x3 (- x1 x5) )
             )
             (+ x3 x2)
       );let
   );if
);define Transform
( define x1 (Transform 3 x2 x3) )
( define x2 (Transform -3 x1 x3) )
x1 x2 x3
( define (SumUp start end) 
  
  ; return the sum of start, start+1, start+2, ..., end
  ; requirement : start <= end
  ; integer version + some nonsense code, which should not hurt
  
  ( cond ( (= start end) start )
         ( (> start end) "Illegal input! the first argument must be smaller or equal to the second.")
         ( else
             ( let ( ( new-start (+ start 1) )
                     ( x1 (+ x1 x2) )
                     ( x3 (+ x3 5) )
                   )
                   ( - x1 x3 )
                   ( + start ( SumUp new-start end ) )
             );let
         );else
  );cond
   
);define SumUp

(SumUp 5 10)
(SumUp 5 3)
(SumUp 5 5)
(+ x1 x2 x3)

(define (SumUp start end) 

  ; return the sum of start, start+1, start+2, ..., end
  ; requirement : start <= end
  ; float version + some nonsense code, which should not hurt
  
  (cond ( (= start end) start )
        ( (> start end) "Illegal input! the first argument must be smaller or equal to the second.")
        ( else
            ( let ( ( new-start (+ start 1) )
                    ( x1 (+ x1 x2) )
                    ( x3 (+ x3 5) )
                  )
                  ( - x1 x3)
                  ( + start 
                      ( if ( > new-start end ) ; just in case we've got a float here
                           end
                          ( SumUp new-start end ) 
                      );if
                  );+
            );let
        );else
  );cond
  
);define SumUp

(SumUp 3.5 10)
(SumUp 3.5 3)
(SumUp 3.5 3.5)
(SumUp 3.5 (SumUp 8 10))
(+ x1 x2 x3)

(clean-environment)

; (define ( atom? exp )
;      (not (pair? exp)
;      )
;   )
(atom? "Hi!")
(atom? '(1 2))
(atom? (car '("Hi" "there!")))
(define ( append exp1 exp2 )
    (cond ( (or (and (atom? exp1)
                     (not (null? exp1))
                )
                (and (atom? exp2)
                     (not (null? exp2))
                )
            )
            (list "invalid argument" exp1 exp2)
          )
          ; neither exp1 nor exp2 is a non-nil atom (anyone can be nil though)
          ( (null? exp1)
            exp2
          )
          ( (null? exp2)
            exp1
          )
          ; neither exp1 nor exp2 is an atom
          ( #t
            (cons (car exp1)
                  (append (cdr exp1)
                          exp2
                  )
            ); cons
          ); #t
    ); cond
  ); define
(append '(1 2 3) '(4 5))
(append '(10 ((20 30) 40)) '((50 (60)) (70 (80 90)))) 
(append (append '(1 2) '(3 4))
          (append '((5) 6) '(7 8))
  )
(append '(1 2 . 3) '(4 5))
(append (cons 1 2)
          (car '((3 4) 5))
  )
; ( define (list? exp)
;      ( cond ( (null? exp)
;               #t
;             )
;             ( (atom? exp) ; non-nil atom
;               #f
;             )
;             ; pair
;             ( #t
;               (list? (cdr exp))
;             )
;      );cond
;   );define
(list? '(1 2 3 4))
(list? '(1 2 3 . 4))
(list? '(1 2 (3 . 4)))
(list? '(13579 ((2 3) . 4) 5))
(list? (list (car '(1 2 3)) 4 5))
( define ( append1 exp1 exp2 )
     (cond ( (or (not (list? exp1))
                 (not (list? exp2))
             )
             "invalid argument"
           )
           ( #t
             (append exp1 exp2)
           )
     );cond
  );define
(append1 '(1 2 . 3) '(4 5))
(append1 (cons 1 2)
           (car '((3 4) 5))
  )
(list? (append1 '(1 2) '(3 4))
  )
(list? (list? (append1 '(1 2) '(3 4)
                )
         )
  )
(append1 '(10 ((20 30) 40)) '((50 (60)) (70 (80 90)))) 
(define (reverse exp)
    (cond ( (atom? exp)
            exp
          )
          ( (not (list? exp))
            "invalid argument"
          )
          ( #t
            (append (reverse (cdr exp))
                    (list (car exp))
            )
          )
    );cond
  ); define
(reverse '(1 2 3 4))
(reverse "Hi")
(reverse (car '(a b c)))
(reverse (append1 '(10 ((20 30) 40)) 
                    '((50 (60)) (70 (80 90)))
           )
  ) 
(define (pairing exp)
    (cond ((null? exp)
           exp
          )
          ((atom? exp)
           (cons exp (list exp))
          )
          ( #t
            (let ((first (car exp))
                 )
               (cons (cons first (list first))
                     (pairing (cdr exp))
               )
            );let
          );#t
    );cond
  );define
(pairing '(1 2 3 4))
(reverse (pairing '(1 2 3 4)))
(define (AllAdd aList aNum)
          (if (null? aList) 
              aList
              (cons (+ (car aList) aNum)
                    (AllAdd (cdr aList) aNum)
              )
          )
  )
(AllAdd '(1 2 3 4) 5)
(exit)