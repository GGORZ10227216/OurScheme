Welcome to OurScheme!

> a defined

> "=============== Problem 6 viewable case ================="

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> 12

> 20

> 0

> Fif defined

> 10

> 1

> 8

> 76

> Fbegin defined

> 1

> -76

> 0

> Fand defined

> #t

> nil

> #t

> nil

> For defined

> nil

> #t

> #t

> nil

> nil

> #t

> x4 defined

> #<procedure lambda>

> 10

> 3

> 4

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> ERROR (no return value) : ( Fcond
  x1
  x2
)

> ERROR (no return value) : ( Fcond
  x2
  x3
)

> 9

> ERROR (no return value) : ( Fcond
  x1
  ( +
    x1
    x1
  )
)

> Fif defined

> 80

> 8

> ERROR (no return value) : ( Fif
  x3
  x2
  x1
)

> 84

> ERROR (unbound parameter) : ( Fif
  x3
  x2
  x1
)

> Fbegin defined

> 1

> -76

> 0

> ERROR (incorrect number of arguments) : Fbegin

> Fand defined

> #t

> nil

> #t

> nil

> For defined

> nil

> #t

> #t

> nil

> #t

> nil

> ERROR (> with incorrect argument type) : ( 4
  .
  4
)

> #t

> x4 defined

> #<procedure lambda>

> 10

> 13

> x5 defined

> 16

> #t

> ERROR (incorrect number of arguments) : lambda

> 3

> 4

> environment cleaned

> ERROR (unbound symbol) : cadr

> cadr defined

> #<procedure cadr>

> ERROR (car with incorrect argument type) : #<procedure cadr>

> ( 30
  40
)

> cadr-clone defined

> #<procedure cadr>

> ( 30
  ( 40
  )
)

> cadr-clone defined

> ( 10
  20
)

> cadr-clone defined

> ERROR (DEFINE format) : ( define
  car
  cadr
)

> ERROR (incorrect number of arguments) : cadr

> ERROR (incorrect number of arguments) : cadr

> ERROR (attempt to apply non-function) : 10

> ERROR (cdr with incorrect argument type) : 10

> ERROR (car with incorrect argument type) : nil

> ERROR (unbound symbol) : cdar

> ERROR (unbound symbol) : x

> cdar defined

> ( 2
)

> ERROR (cdr with incorrect argument type) : 1

> ERROR (unbound symbol) : first

> first defined

> #<procedure car>

> #<procedure car>

> 10

> ERROR (unbound symbol) : First

> First defined

> car

> ERROR (attempt to apply non-function) : car

> ERROR (attempt to apply non-function) : 1

> second defined

> 20

> ( ( 40
    50
  )
  60
)

> ( 40
  50
)

> 50

> ( 50
)

> ERROR (cdr with incorrect argument type) : 10

> a defined

> "=============== Problem 7 viewable case ================="

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> 24

> 40

> -20

> Fif defined

> -34

> -43

> 52

> 32

> Fbegin defined

> 0

> 83

> 7

> Fand defined

> nil

> nil

> #t

> nil

> For defined

> nil

> #t

> #t

> nil

> nil

> #t

> Flambda defined

> #<procedure Flambda>

> #<procedure lambda>

> #<procedure lambda>

> 6

> 9

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> 12

> 7

> 20

> ERROR (no return value) : ( Fcond
  x1
  x1
)

> ERROR (no return value) : ( Fcond
  ( +
    x3
    1
  )
  ( -
    ( +
      x3
      2
    )
    1
  )
)

> Fif defined

> temp1 defined

> temp2 defined

> temp3 defined

> 80

> ERROR (no return value) : ( Fif
  x1
  x2
  x3
)

> ERROR (unbound parameter) : ( Fcond
  x1
  x1
)

> 73

> ERROR (no return value) : ( Fif
  x3
  x2
  x3
)

> -125

> ERROR (unbound parameter) : ( Fif
  x1
  x2
  x3
)

> Fbegin defined

> 9

> 83

> ERROR (no return value) : ( Fbegin
  -80
)

> 9

> Fand defined

> #t

> ERROR (unbound condition) : ( if
  ( >
    x2
    0
  )
  ( <
    x1
    40
  )
)

> #t

> ERROR (unbound condition) : ( if
  ( >
    x2
    0
  )
  ( <
    x1
    40
  )
)

> For defined

> nil

> #t

> #t

> nil

> nil

> #t

> Flambda defined

> #<procedure Flambda>

> #<procedure lambda>

> ERROR (no return value) : ( Flambda
  -10
)

> 6

> ERROR (no return value) : ( Flambda
  -10
)

> 12

> ERROR (no return value) : ( Flambda
  -10
)

> ERROR (unbound parameter) : ( Flambda
  -10
)

> ERROR (+ with incorrect argument type) : #<procedure lambda>

> environment cleaned

> ( 3
  2
  3
)

> ERROR (unbound symbol) : x

> ERROR (LET format) : ( let
  ( car
    ( quote
      ( 1
        2
        3
      )
    )
  )
  5
)

> ERROR (LET format) : ( let
  ( ( x
      3
      4
    )
  )
  5
)

> 2

> ERROR (LET format) : ( let
  ( ( ( car
        ( quote
          ( x
            y
            z
          )
        )
      )
      3
    )
  )
  5
)

> ERROR (LET format) : ( let
  nil
)

> 5

> ERROR (LET format) : ( let
  ( ( x
      5
    )
  )
)

> ERROR (incorrect number of arguments) : cons

> ERROR (incorrect number of arguments) : cons

> ( 5
  .
  10
)

> ERROR (* with incorrect argument type) : ( 5
  .
  10
)

> ERROR (incorrect number of arguments) : cons

> ERROR (incorrect number of arguments) : car

> ERROR (attempt to apply non-function) : 1

> ERROR (LET format) : ( let
  ( ( x
      ( 1
        2
        3
      )
    )
  )
)

> ERROR (LET format) : ( let
  ( ( x
      ( 1
        2
        3
      )
    )
    ( 5
    )
  )
  10
)

> environment cleaned

> a defined

> 13

> 5

> ERROR (unbound symbol) : x

> 16

> 5

> -2

> 3

> 41

> ERROR (LET format) : ( let
  ( ( a
      17
    )
    ( x
      11
      12
    )
  )
  ( -
    a
    x
    ( car
      ( cdr
        ( cdr
          y
        )
      )
    )
    ( let
      ( ( x
          21
        )
      )
      ( +
        a
        x
        5
      )
      ( -
        0
        a
        x
      )
    )
  )
)

> ERROR (unbound symbol) : hello

> a defined

> "=============== Problem 8 viewable case ================="

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> Fif defined

> Fbegin defined

> Fand defined

> For defined

> -10320

> -10

> 8

> For defined

> nil

> #t

> #t

> nil

> #t

> nil

> Flambda defined

> #<procedure Flambda>

> #<procedure lambda>

> #<procedure lambda>

> -60

> -86

> -2580

> -752

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> Fif defined

> Fbegin defined

> Fand defined

> For defined

> 12

> 7

> 20

> ERROR (no return value) : ( Fcond
  x1
  x1
)

> ERROR (no return value) : ( Fcond
  ( +
    x3
    1
  )
  ( -
    ( +
      x3
      2
    )
    1
  )
)

> ERROR (unbound parameter) : ( Fcond
  x1
  x1
)

> temp1 defined

> temp2 defined

> temp3 defined

> 6351

> 949

> ERROR (unbound parameter) : ( Fif
  ( +
    x1
    x2
  )
  x2
  x3
)

> For defined

> ERROR (unbound parameter) : ( Fif
  x1
  x3
  x4
)

> ERROR (unbound parameter) : ( Fif
  x1
  x3
  x4
)

> ERROR (unbound parameter) : ( Fif
  x1
  x3
  x4
)

> #t

> #t

> #t

> Flambda defined

> #<procedure Flambda>

> #<procedure lambda>

> #<procedure lambda>

> -60

> ERROR (unbound parameter) : ( Fif
  ( Fcond
    x3
    x1
  )
  x2
  x3
)

> 45

> ERROR (unbound parameter) : ( Fcond
  x3
  x1
)

> ERROR (unbound parameter) : ( Fif
  ( Fcond
    x3
    x1
  )
  x2
  x3
)

> -480

> -900

> ERROR (unbound parameter) : ( Fif
  ( Fcond
    x3
    x1
  )
  x2
  x3
)

> environment cleaned

> ERROR (LAMBDA format) : ( lambda
)

> ERROR (LAMBDA format) : ( lambda
  x
)

> ERROR (LAMBDA format) : ( lambda
  x
  y
  z
)

> #<procedure lambda>

> ERROR (LAMBDA format) : ( lambda
  ( x
  )
)

> #<procedure lambda>

> ERROR (LAMBDA format) : ( lambda
  ( 5
  )
  y
)

> #<procedure lambda>

> #<procedure lambda>

> ERROR (LAMBDA format) : ( lambda
  nil
)

> #<procedure lambda>

> ERROR (unbound symbol) : c

> 11

> ERROR (incorrect number of arguments) : lambda

> a defined

> f defined

> #<procedure lambda>

> ERROR (incorrect number of arguments) : lambda

> ERROR (unbound symbol) : c

> ERROR (unbound symbol) : b

> c defined

> ERROR (+ with incorrect argument type) : #<procedure lambda>

> ERROR (incorrect number of arguments) : lambda

> c defined

> 14

> 54

> x defined

> y defined

> g defined

> 77556

> 3110

> ERROR (unbound symbol) : why

> ERROR (unbound symbol) : no

> ERROR (incorrect number of arguments) : lambda

> F defined

> G defined

> 15

> F defined

> 40

> F defined

> 20

> H defined

> ( 3
  .
  5
)

> 10

> F defined

> ( 20
  30
)

> 110

> cadr defined

> global defined

> Try defined

> 20

> 10

> ( 20
  30
)

> a defined

> "=============== Problem 9 viewable case ================="

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> 7

> 3

> 4

> Transform defined

> x1 defined

> x2 defined

> 13

> 12

> 5

> SumUp defined

> 45

> "Illegal input! the first argument must be smaller or equal to the second."

> 5

> 30

> SumUp defined

> 55.500

> "Illegal input! the first argument must be smaller or equal to the second."

> 3.500

> 387.000

> 30

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> 7

> 3

> 4

> Transform defined

> ERROR (no return value) : ( Transform
  3
  30
  20
)

> x1 defined

> x2 defined

> x2 defined

> ERROR (unbound parameter) : ( Transform
  3
  30
  20
)

> 54

> 4

> 5

> SumUp defined

> 45

> ERROR (unbound parameter) : ( Transform
  start
  end
  start
)

> "Illegal input! the first argument must be smaller or equal to the second."

> 5

> "Illegal input! the first argument must be smaller or equal to the second."

> "Illegal input! the first argument must be smaller or equal to the second."

> ERROR (unbound parameter) : ( Transform
  3
  ( Transform
    -3
    x1
    x3
  )
  x3
)

> "Illegal input! the first argument must be smaller or equal to the second."

> 63

> SumUp defined

> 55.500

> "Illegal input! the first argument must be smaller or equal to the second."

> 3.500

> ERROR (unbound parameter) : ( Transform
  start
  end
  start
)

> ERROR (= with incorrect argument type) : "Illegal input! the first argument must be smaller or equal to the second."

> 63

> ERROR (DEFINE format) : ( define
  ( atom?
    exp
  )
  ( not
    ( pair?
      exp
    )
  )
)

> #t

> nil

> ERROR (attempt to apply non-function) : 1

> #t

> ERROR (unbound symbol) : append

> append defined

> ( 1
  2
  3
  4
  5
)

> ( 10
  ( ( 20
      30
    )
    40
  )
  ( 50
    ( 60
    )
  )
  ( 70
    ( 80
      90
    )
  )
)

> ( 1
  2
  3
  4
  ( 5
  )
  6
  7
  8
)

> ( 1
  2
  "invalid argument"
  3
  ( 4
    5
  )
)

> ( 1
  "invalid argument"
  2
  ( 3
    4
  )
)

> ERROR (DEFINE format) : ( define
  ( list?
    exp
  )
  ( cond
    ( ( null?
        exp
      )
      #t
    )
    ( ( atom?
        exp
      )
      nil
    )
    ( #t
      ( list?
        ( cdr
          exp
        )
      )
    )
  )
)

> #t

> nil

> #t

> #t

> #t

> append1 defined

> "invalid argument"

> "invalid argument"

> #t

> nil

> ( 10
  ( ( 20
      30
    )
    40
  )
  ( 50
    ( 60
    )
  )
  ( 70
    ( 80
      90
    )
  )
)

> ERROR (incorrect number of arguments) : append1

> ERROR (attempt to apply non-function) : "What"

> reverse defined

> ( 4
  3
  2
  1
)

> ( "Hi"
  13
)

> ERROR (unbound symbol) : a

> ERROR (unbound symbol) : a

> ERROR (car with incorrect argument type) : a

> a

> ( ( 70
    ( 80
      90
    )
  )
  ( 50
    ( 60
    )
  )
  ( ( 20
      30
    )
    40
  )
  10
)

> pairing defined

> ( ( 1
    1
  )
  ( 2
    2
  )
  ( 3
    3
  )
  ( 4
    4
  )
)

> ( ( 4
    4
  )
  ( 3
    3
  )
  ( 2
    2
  )
  ( 1
    1
  )
)

> AllAdd defined

> ( 6
  7
  8
  9
)

> ( -5
  -4
  -3
  -2
)

> ERROR (unbound parameter) : ( Transform
  3
  30
  20
)

> ERROR (+ with incorrect argument type) : add

> ERROR (+ with incorrect argument type) : "Hi"

> ERROR (incorrect number of arguments) : car

> ERROR (car with incorrect argument type) : 1

> ERROR (no closing quote) : END-OF-LINE encountered at Line 1 Column 14

> ERROR (no more input) : END-OF-FILE encountered
Thanks for using OurScheme!