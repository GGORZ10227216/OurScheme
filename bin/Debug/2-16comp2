Welcome to OurScheme!

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 8 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> ERROR (level of CLEAN-ENVIRONMENT)

> 3

> -0.125

> ERROR (no closing quote) : END-OF-LINE encountered at Line 1 Column 9

> ( 3
  .
  4
)

> ( 3
)

> ( 30
)

> ( 30
)

> nil

> ( nil
)

> ( nil
)

> ( nil
)

> ERROR (unbound symbol) : CONS

> ERROR (unbound symbol) : hello

> ERROR (unbound symbol) : hello

> ERROR (unbound symbol) : CONS

> ( 1
  2
  3
)

> nil

> ( nil
  2
  3
  nil
)

> ( 1
  2
  3
)

> ERROR (incorrect number of arguments) : cons

> ( nil
  2
  3
  nil
)

> ERROR (incorrect number of arguments) : cons

> ERROR (incorrect number of arguments) : cons

> ERROR (level of CLEAN-ENVIRONMENT)

> ERROR (incorrect number of arguments) : cons

> ERROR (attempt to apply non-function) : 3

> ( 3
  4
  5
)

> 3

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> ( 3
  ( 4
    5
  )
)

> ERROR (attempt to apply non-function) : 4321

> ( 3
  4321
  5
)

> ERROR (attempt to apply non-function) : 4

> ( 3
  ( 4
    5
  )
)

> ( 3
  ( 4
    5
  )
  6
  ( 7
    8
  )
)

> ERROR (unbound symbol) : abc

> a defined

> ERROR (level of DEFINE)

> ERROR (DEFINE format) : ( define
  5
  10
)

> ERROR (DEFINE format) : ( define
  cons
  5
)

> ERROR (DEFINE format) : ( define
  define
  5
)

> ERROR (DEFINE format) : ( define
)

> ERROR (DEFINE format) : ( define
  a
)

> ERROR (DEFINE format) : ( define
  a
  b
  c
)

> ERROR (level of DEFINE)

> ERROR (incorrect number of arguments) : cons

> ERROR (level of CLEAN-ENVIRONMENT)

> bcd defined

> ( 3
  .
  5
)

> 5

> x defined

> ( ( 3
    4
  )
  5
)

> hello defined

> ( 1
  2
  .
  3
)

> ( ( 1
    2
    .
    3
  )
  .
  4
)

> ( ( 1
    2
    .
    3
  )
  4
)

> hello defined

> ( ""CYCU ICE""
  ( ""CYCU ICE""
    .
    ""CYCU ICE""
  )
)

> ERROR (non-list) : ( list
  hello
  ( cons
    hello
    hello
  )
  .
  hello
)

> ( ""CYCU ICE""
  400
  ( 5000
    600
  )
  70
)

> there defined

> ( ""CYCU ICE""
  .
  "Number One!"
)

> hello defined

> ERROR (DEFINE format) : ( define
  ( quote
    hello
  )
  ( cons
    ( quote
      ( 1
        2
        3
      )
    )
    hello
  )
)

> ( ( ( 1
      2
      3
    )
    .
    ""CYCU ICE""
  )
  4
  hello
)

> a defined

> 3

> ( 3
  4
)

> ( 3
  4
)

> ( 3
  4
)

> 3

> ERROR (car with incorrect argument type) : 3

> ERROR (car with incorrect argument type) : 345

> ERROR (unbound symbol) : WarAndPeace!

> ERROR (car with incorrect argument type) : WarAndPeace!

> WarAndPeace!

> ERROR (cdr with incorrect argument type) : "(War And Peace!)"

> ( 5
)

> ( "Happy New Year!"
  .
  6
)

> "Merry Christmas!"

> ( 4
)

> ERROR (incorrect number of arguments) : exit

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 9 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> nil

> #t

> #t

> nil

> ERROR (incorrect number of arguments) : pair?

> ERROR (incorrect number of arguments) : pair?

> #t

> #t

> nil

> #t

> nil

> nil

> #t

> #t

> #t

> #t

> #t

> #t

> nil

> #t

> #t

> #t

> nil

> #t

> nil

> ERROR (unbound symbol) : America

> America defined

> nil

> #t

> ERROR (unbound symbol) : American

> nil

> ERROR (incorrect number of arguments) : pair?

> Europe defined

> ERROR (incorrect number of arguments) : pair?

> 20

> -14

> -11.500

> 12

> ERROR (* with incorrect argument type) : "Hi"

> 67.500

> ERROR (* with incorrect argument type) : ( 1
  ( 2
    3
  )
  4
)

> ERROR (incorrect number of arguments) : *

> ERROR (incorrect number of arguments) : *

> 60

> 120

> ERROR (incorrect number of arguments) : /

> ERROR (incorrect number of arguments) : -

> ERROR (incorrect number of arguments) : +

> -13

> a defined

> 3

> 1

> 5.000

> 7

> 7.500

> ERROR (division by zero) : /

> 7.500

> 1

> 19.125

> ERROR (+ with incorrect argument type) : nil

> nil

> ERROR (incorrect number of arguments) : not

> ERROR (incorrect number of arguments) : not

> nil

> nil

> #t

> #t

> #t

> #t

> #t

> ERROR (> with incorrect argument type) : nil

> #t

> #t

> nil

> nil

> #t

> #t

> nil

> nil

> ERROR (> with incorrect argument type) : a

> nil

> ERROR (>= with incorrect argument type) : a

> ""Hello, there!""

> "Hello, there! Wait!"

> ERROR (no closing quote) : END-OF-LINE encountered at Line 1 Column 26

> ERROR (incorrect number of arguments) : string-append

> ERROR (incorrect number of arguments) : string-append

> #t

> nil

> #t

> ERROR (incorrect number of arguments) : string>?

> ERROR (incorrect number of arguments) : string>?

> ERROR (string>? with incorrect argument type) : 15

> nil

> nil

> ERROR (string<? with incorrect argument type) : 3

> ERROR (division by zero) : /

> nil

> nil

> nil

> #t

> ERROR (string-append with incorrect argument type) : 3

> ERROR (division by zero) : /

> 20

> ERROR (+ with incorrect argument type) : "hi"

> ERROR (string>? with incorrect argument type) : 5

> ERROR (unbound symbol) : about

> ERROR (incorrect number of arguments) : eqv?

> ERROR (incorrect number of arguments) : eqv?

> #t

> ERROR (incorrect number of arguments) : eqv?

> a defined

> ( ( 3
    ( 4
      5
    )
  )
)

> #t

> nil

> #t

> b defined

> #t

> c defined

> nil

> nil

> nil

> nil

> #t

> #t

> nil

> #t

> c defined

> #t

> c defined

> nil

> #t

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>.<<

> 30

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>.<<

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 10 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> ERROR (level of CLEAN-ENVIRONMENT)

> ERROR (incorrect number of arguments) : if

> ERROR (incorrect number of arguments) : if

> 5

> ERROR (incorrect number of arguments) : if

> good

> good

> ERROR (no return value) : ( if
  ( >
    3
    20
  )
  ( quote
    good
  )
)

> a defined

> good

> bad

> a defined

> ( 3
  4
)

> ( ( 1
    ( 2
    )
    1
  )
  1
)

> ( ( 1
    ( 2
    )
    1
  )
  1
)

> 2

> 3

> 4

> 3

> ERROR (COND format) : ( cond
)

> ERROR (COND format) : ( cond
  nil
)

> ERROR (COND format) : ( cond
  b
)

> ERROR (COND format) : ( cond
  ( #t
  )
)

> ERROR (COND format) : ( cond
  ( #t
    3
  )
  nonsense
)

> ERROR (COND format) : ( cond
  ( nil
  )
  hello
)

> ERROR (COND format) : ( cond
  hello
  ( nil
  )
  there
)

> ERROR (COND format) : ( cond
  ( nil
  )
  ( #t
    3
  )
)

> ERROR (COND format) : ( cond
  ( nil
    nonsense
    terrible
  )
  ( #t
    3
  )
  ( nil
  )
)

> b defined

> good

> ERROR (unbound symbol) : else

> else defined

> good

> good

> "What happened?"

> "What happened?"

> 3

> good

> ERROR (no return value) : ( cond
  ( ( >
      3
      4
    )
    ( quote
      bad
    )
  )
  ( ( >
      4
      5
    )
    ( quote
      bad
    )
  )
)

> 3

> ERROR (COND format) : ( cond
  ( nil
    3
  )
  nonsense
)

> ERROR (no return value) : ( cond
  ( nil
    3
  )
)

> ERROR (COND format) : ( cond
  ( nil
    nonsense
  )
  ( #t
    nonsense
  )
  nonsense
)

> good

> bad

> bad

> ERROR (unbound symbol) : y

> a defined

> b defined

> 5

> else defined

> ( 1
  2
)

> nil

> ( 1
  2
)

> else defined

> nil

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 11 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> ERROR (incorrect number of arguments) : begin

> 3

> 5

> ERROR (unbound symbol) : d

> ERROR (unbound symbol) : d

> ERROR (level of EXIT)

> ( 2
  3
)

> ( ( 1
    2
    3
  )
)

> ERROR (unbound symbol) : d

> a defined

> nil

> 5

> 5

> How

> ( or
  not
  to
  be
  ?
)

> ERROR (cdr with incorrect argument type) : That

> ERROR (car with incorrect argument type) : "Hi,"

> ( " Everybody!"
  "Wake up!"
)

> ERROR (cdr with incorrect argument type) : That

> nil

> ERROR (cdr with incorrect argument type) : That

> hello defined

> there defined

> ( ""CYCU ICE""
  .
  "Number One!"
)

> a defined

> ( 5
  30
  40
)

> ( 30
  40
)

> a defined

> ( ( 5
    3
    30
    40
  )
  3
  30
  40
)

> ( 3
  30
  40
)

> 3

> ( ( 3
    30
    40
  )
  3
)

> a defined

> 3

> ( 40
  3
)

> a defined

> ( 3
  ( 40
    3
  )
  3
)

> b defined

> b defined

> ( ( ( 3
      ( 40
        3
      )
      3
    )
    ( 3
      ( 40
        3
      )
      3
    )
  )
  3
  ( 40
    3
  )
  3
)

> ( ( ( 3
      ( 40
        3
      )
      3
    )
    ( 3
      ( 40
        3
      )
      3
    )
  )
  .
  3
)

> a defined

> b defined

> c defined

> list1 defined

> list2 defined

> str1 defined

> str2 defined

> var1 defined

> #t

> nil

> nil

> ERROR (division by zero) : /

> ( ( 80
    sun
    shines
    bright
  )
  #t
  #t
  7
  ( 1
    2
    3
  )
)

> 340

> 170

> d defined

> 20

> 400

> a defined

> b defined

> ( 0
  #t
)

> 5

> ERROR (attempt to apply non-function) : 3

> ERROR (attempt to apply non-function) : 6

> best

> a defined

> 3200

> ERROR (unbound symbol) : Look!

> ( OK?
  .
  Correct?
)

> ERROR (incorrect number of arguments) : exit

> ERROR (level of EXIT)

> ERROR (level of DEFINE)

> ERROR (incorrect number of arguments) : cons

> ERROR (+ with incorrect argument type) : "Hi"

> ERROR (level of EXIT)

> ERROR (incorrect number of arguments) : cons

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 12 viewable case ================="

> environment cleaned

> #<procedure cons>

> #<procedure car>

> myCons defined

> myCar defined

> #<procedure cons>

> ( #<procedure cons>
  .
  #<procedure car>
)

> ( 3
  4
  myCar
)

> ( ( 10
  )
  .
  20
)

> ( 20
  myCons
)

> ( ( 1
    #<procedure ->
    3
    #<procedure +>
  )
  ( 25
    .
    #<procedure car>
  )
)

> ERROR (incorrect number of arguments) : cons

> >? defined

> <? defined

> =? defined

> first defined

> second defined

> third defined

> cc defined

> "Bad"

> "OK."

> ERROR (unbound symbol) : CDR

> ( ( 1
    2
    3
  )
  ( 25
    .
    35
  )
)

> ERROR (incorrect number of arguments) : begin

> ( it
)

> ( Whether
  or
  not
  to
  be
  ?
)

> ( is
  the
  question
  !
)

> ERROR (cdr with incorrect argument type) : "Hi,"

> ( "Wake up!"
)

> sun-shine defined

> money defined

> ( 40
  shines
  bright
)

> a defined

> d defined

> b defined

> #<procedure />

> 20

> 90

> 20

> ERROR (attempt to apply non-function) : 3

> ERROR (attempt to apply non-function) : 20

> "Best"

> a defined

> 3240

> ERROR (unbound symbol) : Look!

> ( ( OK?
    Correct?
  )
  ( OK?
    Correct?
  )
)

> opr-list defined

> ( #<procedure cons>
  #<procedure pair?>
  #<procedure atom?>
)

> ERROR (attempt to apply non-function) : ( #<procedure cons>
  #<procedure pair?>
  #<procedure atom?>
)

> nil

> #t

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 13 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> operators defined

> -212

> listOfNum defined

> listOfStr defined

> listOfSym defined

> ( What?
  "When?"
  30.100
)

> ( 30.100
  "When?"
  What?
)

> abc defined

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ( What?
  ( 30.100
    "When?"
    What?
  )
)

> ERROR (car with incorrect argument type) : What?

> efg defined

> ( ( What?
    "When?"
    30.100
  )
  30.100
  "When?"
  What?
)

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ++ defined

> -- defined

> 60.544

> 45.544

> ERROR (+ with incorrect argument type) : "Where?"

> ERROR (- with incorrect argument type) : What?

> ERROR (incorrect number of arguments) : if

> ERROR (no return value) : ( if
  ( string>?
    ( car
      listOfStr
    )
    ( car
      ( cdr
        listOfStr
      )
    )
  )
  ( car
    listOfStr
  )
)

> ERROR (car with incorrect argument type) : 30.100

> ERROR (car with incorrect argument type) : "It's a plane!"

> ERROR (incorrect number of arguments) : car

> ERROR (incorrect number of arguments) : cdr

> What? defined

> When? defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 6 : Medium, with error"

> ( 12.500
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 6 is >>.<<

> ( t.nil.
  ( 1
    2
    3
  )
)

> ( 1
  2
  3
  ")"
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>)<<

> ( 1
  2
  3
  ")"
  nil
)

> ( 1
  2
  3
  ")"
)

> ( #t
  nil
  ( 1.250
    0.375
  )
  "#f))"
)

> ( #t
  nil
  ( 1.250
    0.375
  )
  .
  "#f))"
)

> ( ( 1
    2
    3
  )
  ( 4
    .
    5
  )
  6
  ( 7
  )
  ( 8
    .
    9
  )
  .
  10
)

> ( ( 1
    2
    3
  )
  ( 4
    .
    5
  )
  ( 6
    ( 7.000
      ( #f.#f
      )
      0.500
    )
    ( ".5"
      .
      "nil"
    )
  )
)

> ERROR (unexpected token) : ')' expected when token at Line 3 Column 32 is >>.<<

> ( nil-nil=nil
  .nil+nil<>nil
)

> ( quote
  ( !
    %^&
    .
    abc
  )
)

> ( Hi.there
  ( there.
    nil
  )
)

> ( Hi.there
  ( there
    nil
    what
    nil
  )
)

> ( 1
  2
  3
  "To Taiwan"
)

> ( .25#f
)

> ";;;;;;;;;;;;;;;;;;;;;;;;;;;; Test 8 : Complex, with error"

> ( 1
  2
  3
)

> 4

> ( 5
  6
  .
  7
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> ( 1
  2
  3
)

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>.<<

> ( 1
  2
  3
)

> 4

> 5

> ERROR (unexpected token) : atom or '(' expected when token at Line 2 Column 4 is >>)<<

> ( define
  ( f
    z
  )
  ( let
    ( ( x
        5
      )
    )
    ( define
      foo
      ( lambda
        ( y
        )
        ( bar
          x
          y
        )
      )
    )
    ( define
      bar
      ( lambda
        ( a
          b
        )
        ( +
          ( *
            a
            b
          )
          a
        )
      )
    )
    ( +
      ( foo
        ( +
          x
          3
        )
      )
      z
    )
  )
)

> ERROR (non-list) : ( 1
  .
  2
)

> ERROR (unexpected token) : ')' expected when token at Line 9 Column 51 is >>b<<

> ERROR (unbound symbol) : foo

> ERROR (unexpected token) : atom or '(' expected when token at Line 2 Column 4 is >>)<<

> 1

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 7 is >>)<<

> ( ( ( 1
      .
      2
    )
    3.500
    ( 0.875
      4.000
    )
    5
    "5 . 6 . 7 ) "
    0.000
  )
  7.000
  8
)

> ERROR (unexpected token) : ')' expected when token at Line 8 Column 8 is >>(<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 7 is >>)<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>)<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>.<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 3 is >>)<<

> ( save-restriction
  ( if
    ( and
      ignore-quotes
      ( eq
        ( following-char
        )
        ?
      )
    )
    ( forward-char
    )
  )
  ( narrow-to-region
    ( point-min
    )
    opoint
  )
  ( setq
    expr
    ( read
      ( current-buffer
      )
    )
  )
  ( and
    ( consp
      expr
    )
    ( eq
      ( car
        expr
      )
      ( quote
        interactive
      )
    )
    ( setq
      expr
      ( list
        ( quote
          call-interactively
        )
        ( list
          ( quote
            quote
          )
          ( list
            ( quote
              lambda
            )
            ( quote
              ( &rest
                args
              )
            )
            expr
            ( quote
              args
            )
          )
        )
      )
    )
  )
  expr
)

> ERROR (no closing quote) : END-OF-LINE encountered at Line 6 Column 37

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 14 is >>)<<

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 9 is >>)<<

> ERROR (unbound symbol) : forward-char

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>)<<

> ERROR (unbound symbol) : narrow-to-region

> ERROR (unbound symbol) : setq

> ERROR (unbound symbol) : consp

> ERROR (unbound symbol) : expr

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>)<<

> ( defun
  eval-last-sexp-1
  ( eval-last-sexp-arg-internal
  )
  "Evaluate sexp before point; print value in minibuffer.
"
  "With argument, print output into current buffer."
  ( let
    ( ( standard-output
        ( if
          eval-last-sexp-arg-internal
          ( current-buffer
          )
          #t
        )
      )
    )
    ( eval-last-sexp-print-value
      ( eval
        ( preceding-sexp
        )
      )
    )
  )
)

> ERROR (no closing quote) : END-OF-LINE encountered at Line 2 Column 60

> ERROR (unbound symbol) : let

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>)<<

> ( defun
  eval-last-sexp-print-value
  ( value
  )
  ( let
    ( ( unabbreviated
        ( let
          ( ( print-length
              nil
            )
            ( print-level
              nil
            )
          )
          ( prin1-to-string
            value
          )
        )
      )
      ( print-length
        eval-expression-print-length
      )
      ( print-level
        eval-expression-print-level
      )
      ( beg
        ( point
        )
      )
      end
    )
    ( prog1
      ( prin1
        value
      )
      ( let
        ( ( str
            ( eval-expression-print-format
              value
            )
          )
        )
        ( if
          str
          ( princ
            str
          )
        )
      )
      ( setq
        end
        ( point
        )
      )
      ( when
        ( and
          ( bufferp
            standard-output
          )
          ( or
            ( not
              ( null
                print-length
              )
            )
            ( not
              ( null
                print-level
              )
            )
          )
          ( not
            ( string=
              unabbreviated
              ( buffer-substring-no-properties
                beg
                end
              )
            )
          )
        )
        ( last-sexp-setup-props
          beg
          end
          value
          unabbreviated
          ( buffer-substring-no-properties
            beg
            end
          )
        )
      )
    )
  )
)

> 
Thanks for using OurScheme!